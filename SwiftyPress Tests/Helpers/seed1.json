{
    "posts": [
      {
        "id": 26200,
        "title": "Protocol-Oriented Routing in Swift",
        "slug": "protocol-oriented-router-in-swift",
        "type": "post",
        "excerpt": "There are hundreds of complex routing frameworks and libraries in iOS. Usually they're overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I'd like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.",
        "created": "2017-10-01T07:00:54",
        "modified": "2018-10-12T23:37:33",
        "comment_count": 8,
        "link": "http://basememara.com/protocol-oriented-router-in-swift/",
        "author": 2,
        "featured_media": 26240,
        "categories": [
          55
        ],
        "tags": [
          62,
          78,
          50
        ],
        "content": "<p>There are hundreds of complex routing frameworks and libraries in iOS. Usually they&#8217;re overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I&#8217;d like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.</p>\n<h2>The &#8220;Normal&#8221; Way</h2>\n<p>Let&#8217;s examine the <em>&#8220;normal&#8221;</em> way of handling navigation between view controllers. First, avoid segue&#8217;s at all costs since they lock you into a certain navigation flow that&#8217;s rigid and inflexible. Instead, we&#8217;ll create an instance of the target view controller and then use the <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621377-show\" target=\"_blank\" rel=\"noopener\"><em>show</em></a> or <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-present\" target=\"_blank\" rel=\"noopener\"><em>present</em></a> API&#8217;s of <code>UIViewController</code> against it to handle the navigation.</p>\n<p>To do this, let&#8217;s stick with a feature-based app structure and create one storyboard-per-view-controller. Here&#8217;s what our sample app would look like:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png\" alt=\"\" width=\"300\" height=\"383\" class=\"aligncenter wp-image-26240\" /></p>\n<p>Once we add the view controller onto the storyboard via <em>Interface Builder</em>, assign the class to it, and checkmark <em>&#8220;Is Initial View Controller&#8221;</em>, we can create an instance of the view controller by first getting a reference to the storyboard and calling the <a href=\"https://developer.apple.com/documentation/uikit/uistoryboard/1616213-instantiateinitialviewcontroller\" target=\"_blank\" rel=\"noopener\"><em>instantiateInitialViewController</em></a> API from it:<br />\n[crayon-5bc36d86b3420172585552/]<br />\nSince we have to route the user several times within the app life cycle, the above code can get verbose and it isn&#8217;t compile-safe either.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/07/normal-meme-500x520.jpg\" alt=\"\" width=\"400\" height=\"416\" class=\"aligncenter wp-image-26245\" srcset=\"http://basememara.com/wp-content/uploads/2017/07/normal-meme-500x520.jpg 500w, http://basememara.com/wp-content/uploads/2017/07/normal-meme.jpg 700w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>\n<h2>The Routable Protocol Way</h2>\n<p>In the WWDC 2015 talk called &#8220;<a href=\"https://developer.apple.com/videos/play/wwdc2015-411/?time=1593\" target=\"_blank\" rel=\"noopener\">Swift in Practice</a>&#8220;, Apple engineers outlined how to make segue identifiers strongly-typed by creating a protocol with an associated <code>RawRepresentable</code> type that others must conform to:<br />\n[crayon-5bc36d86b3428155488798/]<br />\nWe&#8217;re throwing segues out the window, but we can still use this clever implementation to handle the storyboard routing:<br />\n[crayon-5bc36d86b342b959033706/]<br />\nLet&#8217;s move our original <em>&#8220;normal&#8221;</em> routing code above to a protocol extension to abstract it away:<br />\n[crayon-5bc36d86b342d580119374/]<br />\nNow we can make our view controller conform to the <code>Routable</code> protocol and provide its enum of storyboards, then feed the enum case to the <code>show</code> API:<br />\n[crayon-5bc36d86b3430299571004/]<br />\nYou can use <code>show(storyboard: .profile)</code> a dozen of times and is compile-safe plus sleek.</p>\n<h2>Routable Micro-Library</h2>\n<p>Let&#8217;s add sugar and spice to make this more reusable and flexible:<br />\n[crayon-5bc36d86b3432402533276/]<br />\nNotice I&#8217;ve added <code>show</code> and <code>present</code> API&#8217;s and a trailing closure to configure the controller before and after its loaded so I can use it like this:<br />\n[crayon-5bc36d86b3437153032997/]<br />\nI pushed this into another library so it will be maintained <a href=\"https://github.com/ZamzamInc/ZamzamKit/blob/master/Sources/Protocols/iOS/Routable.swift\" target=\"_blank\" rel=\"noopener\">there going forward</a>. For a complete sample app, you can download a <a href=\"https://github.com/basememara/SwiftyRouter\" target=\"_blank\" rel=\"noopener\">working demo here</a>.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n"
      },
      {
        "id": 5568,
        "title": "Delegates to Swift Closure Pattern",
        "slug": "swift-delegates-closure-pattern",
        "type": "post",
        "excerpt": "Delegation is a simple and powerful pattern. However, closures are more Swifty and scales better. Let's convert delegates to closures!",
        "created": "2017-03-03T11:35:14",
        "modified": "2018-10-10T18:01:25",
        "comment_count": 6,
        "link": "http://basememara.com/swift-delegates-closure-pattern/",
        "author": 2,
        "featured_media": 5576,
        "categories": [
          55
        ],
        "tags": [
          74,
          50,
          73
        ],
        "content": "<p><a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html\" target=\"_blank\">Delegation</a> is a simple and powerful pattern in which one object acts on behalf of another object by holding a reference to the delegate, then sending messages through it. This is the pattern Apple has chosen for its frameworks and has worked quite well&#8230; a little awkward at first, but eventually makes sense 🙂</p>\n<p>Then Swift came along and brought new techniques and patterns due to it&#8217;s functional paradigm. The game changed and Apple&#8217;s coding conventions are making a slow shift to becoming more Swifty. In this post, I&#8217;m going to illustrate how we can convert delegates to a closures-based pattern.</p>\n<h2>What About Delegates?</h2>\n<p>Although delegates are powerful, it&#8217;s a bit archaic. With reactive and event-driven programing, delegates breaks down and lose its elegance. See this simple delegate pattern example below. Notice how the <code>completed</code> flag gets propagated back to the parent object who was passed into the <code>Todo</code> initializer:<br />\n[crayon-5bc36d86b3a5e501876138/]<br />\nThe <code>Todo</code> objects were instantiated in <code>MyParentController</code> and passed itself in as the delegate. It accepted the delegate as a specific protocol called <code>TodoDelegate</code>. This protocol will indicate to the <code>Todo</code> object what properties and functions the delegate has.</p>\n<p>In the <code>complete</code> property of <code>Todo</code>, the <code>didSet</code> event calls the delegate&#8217;s <code>completed</code> function. It knows that the <code>completed</code> function is there because <code>MyParentController</code> adopts <code>TodoDelegate</code>.</p>\n<p>This is where delegates breaks down. The <code>completed</code> function in <code>MyParentController</code> is being shared for all <code>Todo</code> objects. I have to put a <code>switch</code> statement there to find the one who triggered it and perform the customized action for it. What if we we&#8217;re listening to hundreds of <code>Todo</code> objects, that <code>switch</code> statement would get out of control. Even besides this, it feels weird that the <code>Todo</code> object and the triggered function are in two different places.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/03/awkward_meme.jpg\" width=\"300\" height=\"300\" class=\"aligncenter wp-image-5570\" srcset=\"http://basememara.com/wp-content/uploads/2017/03/awkward_meme.jpg 400w, http://basememara.com/wp-content/uploads/2017/03/awkward_meme-150x150.jpg 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<h2>Delegates to Closure Pattern</h2>\n<p>We will now convert the above delegate pattern to a closure-based one. This fits more into the functional programming paradigm. Instead of a delegate function getting triggered, we will allow callers to &#8220;subscribe&#8221; to the <code>Todo</code> object. The subscriptions will take a closure and queue it for later execution when ready:<br />\n[crayon-5bc36d86b3a66651265987/]<br />\nWe got rid of the delegate protocol completely. In fact, the <code>Todo</code> objects doesn&#8217;t even need a reference to <code>MyParentController</code> at all! Instead, the caller subscribes to the todo&#8217;s events:<br />\n[crayon-5bc36d86b3a6e056400421/]<br />\nThis is great because now the focus is on the <code>Todo</code> object. It makes more sense to attach a closure to the <code>Todo</code> object itself instead of defining it somewhere else in a shared delegate function.</p>\n<p>During the <code>subscribe</code> process, it stores this closure into a queue to be called later when ready:<br />\n[crayon-5bc36d86b3a70948616657/]<br />\nWhen it&#8217;s time to trigger the event, it executes the closures in the queue one by one:<br />\n[crayon-5bc36d86b3a73079190471/]<br />\n<img src=\"http://basememara.com/wp-content/uploads/2017/03/brilliant_meme.jpg\" alt=\"\" width=\"350\" height=\"400\" class=\"aligncenter size-full wp-image-5571\" /></p>\n<h2>What About Thread-Safety?</h2>\n<p>There&#8217;s one complication you must handle. The queue is simply an array of closures. This can be dangerous if subscriptions were to happen from multiple threads. Therefore, we need some locking or exclusivity mechanism on the queue. The good news is I have already done this in another post called <a href=\"http://basememara.com/creating-thread-safe-arrays-in-swift/\" target=\"_blank\">Creating Thread-Safe Arrays in Swift</a>. We can use the <code>SynchronizedArray</code> from there for our queue type:<br />\n[crayon-5bc36d86b3a76104713064/]<br />\nEverything else stays the same because the <code>SynchronizedArray</code> has many of the same API&#8217;s as a regular array, but is thread-safe!</p>\n<h2>Conclusion</h2>\n<p>Although this was a simple example, the delegate to closure pattern can be applied to more complex scenarios. For example, imagine you can subscribe to GPS location updates instead of sharing a single delegate function:<br />\n[crayon-5bc36d86b3a78170780005/]<br />\nThis becomes even more useful for shared singletons which can only accept one delegate, instead of being able to trigger multiple delegates. In a future post, I&#8217;ll convert delegates to closures for native Apple managers like <a href=\"https://developer.apple.com/reference/corelocation/cllocationmanager\" target=\"_blank\">CLLocationManager</a> and <a href=\"https://developer.apple.com/reference/corebluetooth/cbcentralmanager\" target=\"_blank\">CBCentralManager</a>. With a thread-safe queue in place, working with them should feel Swifty and robust.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n"
      },
      {
        "id": 791,
        "title": "What's New in iOS 10 and Beyond",
        "slug": "whats-new-ios-beyond",
        "type": "post",
        "excerpt": "It is clear from this year's WWDC that Apple envisions a new era beyond the traditional apps-in-a-grid-on-your-home-screen model. iOS 10 is more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.",
        "created": "2016-06-27T07:17:01",
        "modified": "2018-10-06T10:38:50",
        "comment_count": 0,
        "link": "http://basememara.com/whats-new-ios-beyond/",
        "author": 2,
        "featured_media": 792,
        "categories": [
          4
        ],
        "tags": [
          68,
          53,
          67
        ],
        "content": "<p>This year&#8217;s <a href=\"https://developer.apple.com/wwdc/\" target=\"_blank\">WWDC</a> felt different than previous years. Things have been more evolutionary since iOS 7. However, <a href=\"https://developer.apple.com/ios/\" target=\"_blank\">iOS 10</a> seems more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.</p>\n<h2>AI</h2>\n<p>It has been clear from the beginning that Apple takes Siri seriously. However, it seemed Apple has been stagnant in this space since its introduction in 2011 (yes, it&#8217;s been that long!). WWDC showed us that Apple has been working hard in the lab to play catch up. Though, Siri has been under-utilized by many of its users, there&#8217;s been something missing . So what was it? Unlike Google, Apple needed years of data collection to catch up and seems like it&#8217;s finally about to pay off. <a href=\"http://blog.cryptographyengineering.com/2016/06/what-is-differential-privacy.html\" target=\"_blank\">Differential privacy</a> will give this an even bigger boast. However, most of all, opening Siri up to developers with <a href=\"https://developer.apple.com/sirikit/\" target=\"_blank\">SiriKit</a> will be the game changer that will change the landscape for Apple&#8217;s AI.</p>\n<h2>IoT</h2>\n<p><a href=\"https://developer.apple.com/reference/homekit\" target=\"_blank\">HomeKit</a> has a new Home app and takes a front seat in iOS 10 with a dedicated area in Mission Control.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg\" alt=\"iOS 10 HomeKit\" width=\"300\" class=\"aligncenter size-medium wp-image-792\" srcset=\"http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg 500w, http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app-768x513.jpg 768w, http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app.jpg 800w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Previously, HomeKit required developers to create their own app to leverage the framework. Now in iOS 10, the Home app is baked right into iOS and unifies the smart home dream. This is exactly what is needed in the clunky and fragmented smart home sector.</p>\n<h2>Messaging</h2>\n<p>Instant messaging is integral to the technological evolution. It has made email look like fax. We are seeing new ways instant messaging platforms are being re-imagined by the introduction of chatbots. iMessages is the most used Apple app and now it has also been <a href=\"https://developer.apple.com/imessage/\" target=\"_blank\">opened to developers</a>. Although you can expect to see new ways to send kitten GIF&#8217;s in iMessages, expect to also see more profound advances that will move iMessages to the AI category.</p>\n<h2>VoiP</h2>\n<p>The new <a href=\"https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html\" target=\"_blank\">CallKit</a> framework allows VoiP apps, like Skype, to act as first-class phone citizens. You can make VoiP calls from the native contact cards, and even better, receive VoiP calls as if they were regular phone calls. This is the exact disruption we need against the traditional cellular carriers. Get ready to dump your minutes for data.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10-500x697.png\" alt=\"callkit-voip-ios10\" width=\"300\" class=\"aligncenter size-medium wp-image-794\" srcset=\"http://basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10-500x697.png 500w, http://basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10.png 604w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>Widgets</h2>\n<p>The Today Widgets and Notifications have been somewhat merged in a sense. Widgets now appear on the lock screen, but that&#8217;s not the only place you see widgets. 3D Touch notifications and even app icons from the home screen pop-up full fledged, interactive widgets. Opening apps is becoming less and less of a requirement, widgets from the lock screen and from notifications may be the only thing you need from an app.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/06/ios10-widgets-500x362.jpg\" alt=\"ios10-widgets\" width=\"500\" height=\"362\" class=\"aligncenter size-medium wp-image-793\" srcset=\"http://basememara.com/wp-content/uploads/2016/06/ios10-widgets-500x362.jpg 500w, http://basememara.com/wp-content/uploads/2016/06/ios10-widgets.jpg 760w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>Conclusion</h2>\n<p>It is clear from this year&#8217;s WWDC that Apple envisions a new era beyond the traditional apps-in-a-grid-on-your-home-screen model. Instead, opening up native iOS services to developers allows apps to be automatically served to the user based on context. This is indeed a new app-era, which shifts from the app-centric model to a service-based model. The entry point to your app is no longer opening up your app icon anymore, but opening up native services, such as Siri, Maps, or Messages, that will surface your app logic to the user.</p>\n"
      },
      {
        "id": 41373,
        "title": "Protocol-Oriented Themes for iOS Apps",
        "slug": "protocol-oriented-themes-for-ios-apps",
        "type": "post",
        "excerpt": "Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. In this post, I'm going to show you the native way of theming an iOS app as intended by Apple that is often overlooked.",
        "created": "2018-09-29T13:12:15",
        "modified": "2018-09-30T14:18:55",
        "comment_count": 0,
        "link": "http://basememara.com/protocol-oriented-themes-for-ios-apps/",
        "author": 2,
        "featured_media": 41397,
        "categories": [
          55
        ],
        "tags": [
          53,
          62,
          81
        ],
        "content": "<p>Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. Then you look at the code&#8230;</p>\n<p><em>Color and font changes are sprinkled all over storyboards and views!!</em></p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/09/angry-throw-monitor-1.gif\" alt=\"\" width=\"500\" height=\"289\" class=\"aligncenter wp-image-41378 size-full\" /></p>\n<p>Ok you wish they had a bit more foresight when they were making the app the first time, but then they wouldn&#8217;t have reached out to you now right? In this post, I&#8217;m going to show you the native way of theming an iOS app as intended by Apple. It&#8217;s often overlooked, well because&#8230;</p>\n<h2>UIAppearance Sucks</h2>\n<p>I&#8217;m sure most of you have toyed with <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener\"><em>UIAppearance</em></a> and quickly gave up on it because of its limitations, especially if you&#8217;ve been spoiled with CSS stylesheets for web development or theme resources for Android apps. Apple&#8217;s way of theming is quite awkward, but it&#8217;s what we got and I urge you not to roll out your own or use yet another dependency.</p>\n<p>In a nutshell, <code>UIAppearance</code> allows you to style <em>UIKit</em> controls globally using a proxy, or a class that stands in as a placeholder which applies itself to the control when it gets added to the window hierarchy. For example, you can globally change labels to red text like this:<br />\n[crayon-5bc36d86b3f57939645575/]<br />\nIt&#8217;s like a static function that gets applied to all future instances. Though, it&#8217;s like a sledge hammer for a nail because it applies to <em>ALL</em> labels in the app, even in places you didn&#8217;t even know labels existed! This is where most people give up on <code>UIAppearance</code>.</p>\n<h2>UIAppearance Sucks&#8230; Well Kinda&#8230;</h2>\n<p>Apple&#8217;s answer to styles and themes is for you to subclass your <em>UIKit</em> controls and use <code>UIAppearance</code> on those custom controls like this:<br />\n[crayon-5bc36d86b3f61945008998/]<br />\nThat&#8217;s the awkward part, Apple wants you to use object-oriented programming to theme your apps. I don&#8217;t think they understood that a CSS-<em>class</em> isn&#8217;t really a <em>class</em> 🙄.</p>\n<p>You can take it one step further though:<br />\n[crayon-5bc36d86b3f63541542129/]<br />\nThis will change the appearance of all <em>AppLabel&#8217;s</em> only contained in <em>MyCustomView&#8217;s</em>. So that&#8217;s your other option &#8211; to change your UI hierarchy to accommodate styling 🤦‍♂️. Why couldn&#8217;t they just add a new space-delimited string property called styles that gets realized by its children??</p>\n<p>Anyways, surprisingly things become really powerful when you start feeding <code>whenContainedInInstancesOf</code> an array of classes, which defines the hierarchy chain of the control. The specificity let&#8217;s you zero in on controls.<br />\n[crayon-5bc36d86b3f66569896057/]<br />\nAnother Apple awkwardness is that the outer most parent wins (unlike CSS and the rest of the world). So in the above example, <code>[MyViewController.self]</code> wins over <code>[MyCustomView.self]</code>, even though <code>MyCustomView</code> is the closest parent.</p>\n<p>The way it works is the selector starts from top-to-bottom of the hierarchy, which means when it first hits <code>MyViewController</code> it stops. The label will be blue, not red, even if it&#8217;s contained in a <code>MyCustomView</code>. Fortunately though, the longer your array is (the more specific it is), the higher priority it is. In this case, the labels in <code>MyCustomView</code> will be yellow if it is on the <code>MyViewController</code> screen.</p>\n<p>Once you understand and toy around with these quirks, it becomes a full-fledged styling framework!</p>\n<h2>Styleable Controls</h2>\n<p>First thing we must do is subclass all the controls we want to style in our app. Not the best use of object-oriented programming, but it&#8217;s native theming (<em>see rant above</em>). Here&#8217;s what I got:</p>\n<p><em>AppLabel.swift:</em><br />\n[crayon-5bc36d86b3f69577931922/]<br />\n<em>AppButton.swift:</em><br />\n[crayon-5bc36d86b3f6b223567670/]<br />\n<em>AppSwitch.swift:</em><br />\n[crayon-5bc36d86b3f6e770094338/]<br />\n<em>AppView.swift:</em><br />\n[crayon-5bc36d86b3f70703730779/]<br />\nIn our storyboard, we will now use these custom classes:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png\" alt=\"\" width=\"500\" height=\"281\" class=\"aligncenter size-medium wp-image-41382\" srcset=\"http://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png 500w, http://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-768x432.png 768w, http://basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class.png 854w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>However, we will not change colors in the storyboard.. leave them all on the defaults! Nor will we style and theme the custom controls in the <code>awakeFromNib()</code> event!</p>\n<p>Instead we will style our controls like this:<br />\n[crayon-5bc36d86b3f72995409849/]<br />\nThis should take place in the <code>AppDelegate.willFinishLaunchingWithOptions</code> event so it can be ready before any controls are loaded into your app. You can call the <code>UIAppearance</code> proxy later to change your styles, but it will only apply to newly added controls to the window. All existing controls need to be removed and added back to have the new styles take effect (yes more quirks, but I have a helper below I will mention).</p>\n<h2>The Theme Protocol</h2>\n<p>We need swappable themes for our app right? Even if you only have one theme, designing it in such a way will allow you to maintain the styles much more easily and add different themes later.</p>\n<p>Here&#8217;s a protocol for the themes we can use:<br />\n[crayon-5bc36d86b3f75279307187/]<br />\nThen we can extend the protocol to change the appearance for controls using the above properties which themes will conform to. The extension can look something like:<br />\n[crayon-5bc36d86b3f78268235959/]<br />\nAnd the themes that conform would only have to fill in the property values:<br />\n[crayon-5bc36d86b3f7b202208164/]<br />\nHere&#8217;s what another theme would look like:<br />\n[crayon-5bc36d86b3f7e130379814/]<br />\nFinally you call the theme early in the app lifecycle:<br />\n[crayon-5bc36d86b3f80750689863/]<br />\nThere you have it &#8211; native, simple theming for your iOS app.. no dependency, magic, or singleton!</p>\n<h2>Extending Themes</h2>\n<p>What if one of your custom themes wants to add extra styling? Implementing the <code>func apply(for application: UIApplication)</code> on the theme will wipe out existing logic which is not what we want, so instead I can add a <code>func extend()</code> to the protocol and call it within the <code>apply(for:)</code> extension:<br />\n[crayon-5bc36d86b3f83090836284/]<br />\nYou see how <code>apply(for:)</code> calls <code>extend()</code> right in the protocol extension? Now the themes that conform can simply put their extended styling logic in <code>extend()</code>:<br />\n[crayon-5bc36d86b3f85668895082/]</p>\n<h2>Changing Themes</h2>\n<p>Another reason why most people abandon <code>UIAppearance</code> is you can&#8217;t change styles for existing controls that are already loaded. Apple makes it clear in the <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener\">documentation</a>:</p>\n<blockquote><p>iOS applies appearance changes when a view enters a window, it doesn’t change the appearance of a view that’s already in a window. To change the appearance of a view that’s currently in a window, remove the view from the view hierarchy and then put it back.</p></blockquote>\n<p>It&#8217;s pretty ridiculous that every single control has to be removed and added again to realize the new styles. After changing <code>UIAppearance</code> values, you have to traverse through the entire <code>UIWindow</code> hierarchy and remove/add  controls:<br />\n[crayon-5bc36d86b3f88759759061/]<br />\nIt makes my stomach turn, but I guess users shouldn&#8217;t be changing themes often &#8211; plus it&#8217;s still native theming right?</p>\n<p>Take it one step further and turn it into an extension:<br />\n[crayon-5bc36d86b3f8a398545089/]<br />\nNow in your original <code>Theme</code> protocol, you can abstract it away:<br />\n[crayon-5bc36d86b3f8d775213212/]<br />\nNote that the first time the theme gets applied in <code>AppDelegate.willFinishLaunchingWithOptions</code>, the  <code>window</code> object won&#8217;t have any subviews in it so it will just be ignored. The <code>reload</code> will only run if called after <code>AppDelegate.willFinishLaunchingWithOptions</code>.</p>\n<h2>Beyond Colors</h2>\n<p>So far I&#8217;ve only emphasized colors, but you can style fonts with <code>UIAppearance</code>, but I prefer to only use the built-in ones in storyboard because it respects dynamic font sizes. If your designer insists, you&#8217;ll want to support accessibility which is a whole other topic.</p>\n<p>But did you know you can use <code>UIAppearance</code> on just about any property? You can even change text properties for all <code>UILabel</code> controls! Of course this would be obnoxious to do, but it&#8217;s possible:<br />\n[crayon-5bc36d86b3f8f297535395/]<br />\nYou could, however, add your own custom properties and set them via <code>UIAppearance</code> as well! Let&#8217;s take the selected highlight color for <code>UITableViewCell</code>. This is not a native property from <code>UIKit</code> unfortunately, so you&#8217;d have to do something like this:<br />\n[crayon-5bc36d86b3f92497473209/]<br />\nYou could take it one step further and turn it into an extension:<br />\n[crayon-5bc36d86b3f94493640582/]<br />\nWhen you try to update this property via <code>UIAppearance</code>, you&#8217;ll notice it doesn&#8217;t do anything. To expose your custom properties to <code>UIAppearance</code>, you have to add the <code>dynamic</code> keyword to the property to force the <em>Swift</em> compiler to use an <em>Objective-C</em> message that <code>UIAppearance</code> relies on:<br />\n[crayon-5bc36d86b3f96563378956/]<br />\nNow you can do this:<br />\n[crayon-5bc36d86b3f98045152426/]<br />\nAt this point, we got everything we need.</p>\n<h2>Demo Time!</h2>\n<p>I put together a sample project with a segmented control to switch between themes:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png\" alt=\"\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-41397\" srcset=\"http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png 500w, http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-768x544.png 768w, http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-1024x725.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>The <code>Theme</code> protocol that does the heavy lifting looks like this:<br />\n[crayon-5bc36d86b3f9b130853065/]<br />\nThen you can add as many themes as you want:<br />\n[crayon-5bc36d86b3fa0799924009/]<br />\nFinally in my segmented control change event, I can simply change themes like this:<br />\n[crayon-5bc36d86b3fa2646080805/]<br />\nThe complete source code can be <a href=\"https://github.com/basememara/ThemeKit\" target=\"_blank\" rel=\"noopener\">downloaded and run here</a>.</p>\n<h2>Conclusion</h2>\n<p><code>UIAppearance</code> has been around since iOS 5, but it is often overlooked and underestimated. Apple uses this framework to style its own apps, such as <em>Find Friends</em> and many other apps. Sticking with native functionality is always a good idea and hopefully I&#8217;ve given you a newfound appreciation for the built-in theming framework.</p>\n<p>To learn more about <code>UIAppearance</code>, check out these resources:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2011/114/\" target=\"_blank\" rel=\"noopener\">WWDC 2011: Customizing the Appearance of UIKit Controls</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2012/216/\" target=\"_blank\" rel=\"noopener\">WWDC 2012: Advanced Appearance Customization on iOS</a></li>\n<li><a href=\"https://spin.atomicobject.com/2017/08/16/uiappearance-container-hierarchies/\" target=\"_blank\" rel=\"noopener\">Understanding UIAppearance Container Hierarchies</a></li>\n</ul>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n"
      },
      {
        "id": 771,
        "title": "Memory Leaks and Resource Management in Swift and iOS",
        "slug": "memory-leaks-resource-management-swift-ios",
        "type": "post",
        "excerpt": "Less code and less memory while performing the same task at hand is truly where the art comes in. In this post, I'd like to highlight some of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.",
        "created": "2016-05-24T06:19:06",
        "modified": "2018-09-30T07:49:10",
        "comment_count": 5,
        "link": "http://basememara.com/memory-leaks-resource-management-swift-ios/",
        "author": 2,
        "featured_media": 777,
        "categories": [
          55
        ],
        "tags": [
          53,
          66,
          50,
          47
        ],
        "content": "<p>Someone once told me what separates an amateur developer from a seasoned one is their footprint on the system. This is so true; less code and less memory while performing the same task at hand is truly where the art comes in. So in this sobering post, I&#8217;d like to highlight some of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.</p>\n<h2>Back to the Basics: Reference Counting</h2>\n<p>On the machine-level, memory is allocated for our software during runtime. Anytime an object, variable, or data is created, it&#8217;s stored in memory by the system. How does the software we write access that memory? This is where references, pointers, and handles come in, which are basically associations to the memory location. It&#8217;s the glue between our software and the machine; where the virtual and physical world meet.</p>\n<p>For example, say I create an instance and pass it around to other variables:<br />\n[crayon-5bc36d86b4497380219521/]<br />\nThe instance of &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; is not actually stored in &#8220;car1&#8221;. This actually doesn&#8217;t make sense when you think about it. The variable &#8220;<em>car1</em>&#8221; isn&#8217;t memory, its text in your source code that represents a location to memory. This is what a reference is, &#8220;<em>car1</em>&#8221; is actually referencing the memory location of the &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; instance.</p>\n<p>Even though there are 3 variables, &#8220;<em>car1</em>&#8220;, &#8220;<em>car2</em>&#8220;, and &#8220;<em>car3</em>&#8220;, there is only one instance, &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8220;. The 3 variables are referencing that same memory location of the instance. This means the reference count is 3 for that object, <em>therefore reference counting is occurring</em>.</p>\n<p>If you <em>nil</em> one variable out:<br />\n[crayon-5bc36d86b449f600684687/]<br />\nNow the reference count is down to 2. Now if you do it again:<br />\n[crayon-5bc36d86b44a1162848703/]<br />\nThe reference count is down to 1. And one more time:<br />\n[crayon-5bc36d86b44a4093321558/]<br />\nFinally, the reference count is zero and now the system deallocates the instance from memory and frees up that resource space.</p>\n<p>This is garbage collection and the algorithm Apple has chosen for its <em>Cocoa</em>, <em>Cocoa Touch</em>, and <em>Core Foundation</em> ecosystems. It seems archaic compared to tracing garbage collections algorithms, such as those used in .NET and Java. However, it is the most efficient since memory is freed right away and doesn&#8217;t suffer from the performance intensities of sweeping unused memory. These advantages are at the cost of burdening programmers with understanding memory allocation and avoiding reference cycles.</p>\n<h2>How Memory Leaks Happen</h2>\n<p>The reference count increment/decrement dance I&#8217;ve illustrated used to be a manual process back in the day with Objective-C before iOS5. It was painful; <em>retain</em>, <em>release</em>, and <em>autorelease</em> had to be manually written out by the programmer to allocate and deallocate memory. If you ever forgot or missed deallocating memory for an instance, a memory leak would easily happen.</p>\n<p>Then Apple graced us with Automatic Reference Counting (ARC), which took the load off developers having to manually do the reference counting. Reference counting didn&#8217;t go away though; it was just abstracted away by simply doing what the developer would do to manage memory. The concept of reference counting lives on and there is another memory leak trap that has to do with reference counting: <em>strong reference cycles</em>.</p>\n<h2>What is Strong Reference Cycles</h2>\n<p>Let&#8217;s add a driver to our previous example:<br />\n[crayon-5bc36d86b44a7782629399/]<br />\nThe &#8220;<em>Car</em>&#8221; class now has a &#8220;d<em>river</em>&#8221; property. Also, the &#8220;<em>Driver</em>&#8221; class has a property that is an array of &#8220;<em>cars</em>&#8220;. This is legitimate since a car can only have one driver, but a driver can have multiple cars.</p>\n<p>Now let&#8217;s start assigning instances:<br />\n[crayon-5bc36d86b44a9354578571/]<br />\nThe reference count for the driver and car instances in memory is 2 each. Remember, only one instance is actually stored in memory; the variables and properties only hold a reference to their memory locations.</p>\n<p>Now wipe out <em>myCar</em> and <em>myDriver</em> variables and let&#8217;s see what happens to the memory deallocation:<br />\n[crayon-5bc36d86b44ac353739145/]<br />\nYou just chopped off access to the instances in memory: &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; and &#8220;<em>Driver(name: &#8220;Neo&#8221;)</em>&#8220;. Remember, even though those variables have been terminated, the actual instances still exist in memory. Why did the system not deallocate the instances? Because they have properties in them that reference each other: <em>&lt;&lt;Car instance&gt;&gt;.driver</em> and <em>&lt;&lt;Driver instance&gt;&gt;.cars[0]</em>, so their reference count is not zero. They are keeping each other alive and we have no way to get to them:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/05/reference-count.png\" alt=\"reference-count\" width=\"397\" height=\"267\" class=\"aligncenter size-full wp-image-774\" /></p>\n<p>This is a strong reference cycle; those instances will never be released from memory and are inaccessible too.</p>\n<h3>1. Resolving Strong Reference Cycles Like It&#8217;s 1999!</h3>\n<p>On a basic level, the strong reference cycle can be prevented by cleaning up all the instances in the correct order the old fashioned way. For example, before wiping out the driver variable, clear out the &#8220;<em>driver</em>&#8221; property of the car instance first:<br />\n[crayon-5bc36d86b44af444419676/]<br />\nProblem solved! No more reference cycle and the instances are released from memory since no reference cycle exists that would keep each other alive. Likewise, you can pop off all the cars from the driver instance instead before wiping out the car variable:<br />\n[crayon-5bc36d86b44b7746300423/]<br />\nProblem solved again! Just a different way.</p>\n<p>However, this is not a very elegant or scalable solution. This is just a small scenario. What happens if there are dozens of properties? And those properties are managed by other modules? How would I know when and if it&#8217;s ok to wipe out the properties and in what order?</p>\n<h3>2. Resolving Strong Reference Cycles Like a Champ!</h3>\n<p>Swift offers two keywords that break the strong reference cycle: &#8220;<em>weak</em>&#8221; and &#8220;<em>unowned</em>&#8220;. These are decorators on the properties that tell the compiler not to increment the counter for those references. Below is how we would break the strong reference cycle:<br />\n[crayon-5bc36d86b44b9405021488/]<br />\nNotice the &#8220;<em>driver</em>&#8221; property of the &#8220;<em>Car</em>&#8221; class is decorated with &#8220;<em>weak</em>&#8220;. It means when this property creates a reference to an instance, do not increment the instance&#8217;s reference count. This same concept gets applied to delegates, where it should almost always be declared as &#8220;<em>weak</em>&#8220;.</p>\n<p>What about &#8220;<em>unowned</em>&#8220;? It does the same thing, except this keyword is used for non-optional properties. It implies that the property will never become <em>nil</em>. A common place this is used is with closures, where strong reference cycles lurk as well. For example, let&#8217;s add a closure property to the &#8220;<em>Driver</em>&#8221; class that outputs all the car plates they own:<br />\n[crayon-5bc36d86b44bc695045864/]<br />\nThe property called &#8220;<em>allPlates</em>&#8221; doesn&#8217;t own &#8220;<em>self</em>&#8220;. It is not possible that the property would exist without the instance, so this makes a good candidate for &#8220;<em>[unowned]</em>&#8220;.</p>\n<p><em>Note 1:</em> I could have made &#8220;<em>allPlates</em>&#8221; a function, but there are scenarios that making a closure property makes sense if subclassing is overkill; instead of subclassing, overwriting the closure property with another closure is possible.</p>\n<p><em>Note 2:</em> Do not confuse a closure property with a lazy variable:<br />\n[crayon-5bc36d86b44c1070004756/]<br />\nA strong reference cycle is not possible in this case since it is only executed once and deallocates right after. In addition, if you were to add cars to the driver after this executed, calling this property would not consider new cars so this is not what we want!</p>\n<p>Another common area where<em> [unowned self]</em> is used is <em>NSNotificationCenter</em> blocks:<br />\n[crayon-5bc36d86b44c3927461852/]<br />\nHowever, you do not have a possible strong reference cycle in &#8220;<em>UIView.animation</em>&#8221; because there&#8217;s no circular reference:<br />\n[crayon-5bc36d86b44c6585694377/]<br />\nYou should be wondering why do you have to handle strong reference cycles in <em>NSNotificationCenter</em> and not <em>UIView.animateWithDuration</em>. There are some quirks in the Cocoa framework itself that leak objects. A couple of examples are <a href=\"http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/\" target=\"_blank\" rel=\"noopener\">NSNotificationCenter</a> and <a href=\"http://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak\" target=\"_blank\" rel=\"noopener\">WKWebKit</a>. There&#8217;s not much you can do about this except to keep your ears to the ground and listen to the community, as well as poking around popular open source libraries that have been battle tested.</p>\n<p>Finally, careful not to unnecessarily use <em>[weak/unowned self]</em>, otherwise your objects will be deallocated right away before you get a chance to use it!</p>\n<h3>3. Resolving Strong Reference Cycles Like a Jedi!</h3>\n<p>There is one more way to handle strong reference cycle that is a complete mind shift: <em>use structs over classes!</em> Value types keep a unique copy of their data, while reference types share a single copy of their data. This is in-line with Swift&#8217;s philosophy of value over reference types. Almost everything in the Swift core library is immutable, about 100-to-1 in the source code! Structs are everywhere and rarely will you see a class in Swift. In fact, the Swift team is undertaking a major update to the Foundation library, where it will wrap many <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md\" target=\"_blank\" rel=\"noopener\">reference types to value types</a>.  Choose a struct over a class any day or you better have a good reason!</p>\n<p>Let&#8217;s update our &#8220;<em>Car</em>&#8221; and &#8220;<em>Driver</em>&#8221; classes to structs:<br />\n[crayon-5bc36d86b44c9451625228/]<br />\nThat&#8217;s it! Good-bye strong reference cycles, <em>weak</em>, and <em>unowned</em>! This is because reference counts are always 1 for value types. There are no references to it. Instead, they are copied when assigned to a new variable:<br />\n[crayon-5bc36d86b44cd626035940/]<br />\nUsing value types over reference type is a world of difference with Objective-C and the recommended approach from the Swift team. It&#8217;s safer because many bugs in software arise from unexpected state changes. Of course, there is a place for classes, but as <a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">Crusty says</a>: Start with a protocol, then a struct, then a class when necessary.</p>\n<p>The implications of this are vast, see be aware:<br />\n[crayon-5bc36d86b44d0056368210/]<br />\nNotice with classes, updating &#8220;<em>car3</em>&#8221; affects &#8220;<em>car2</em>&#8220;. However with structs, updating &#8220;<em>car3</em>&#8221; is self contained and only affects &#8220;<em>car3</em>&#8220;. It&#8217;s very functional; inputting a value into function outputs another value without affecting the rest of the application &#8211; very modular! So before using value semantics, ensure you&#8217;re thinking value semantics and let it work for you.</p>\n<h2>Other Memory Issues</h2>\n<p>We only discussed memory leaks in this post, which is inaccessible memory that has no more pointers to it. There are other memory issues that can plague your app that you should be conscious of.</p>\n<h3>Abandoned Memory</h3>\n<p>This kind of memory still has references to it, but are wasted since they won&#8217;t ever be used again. There is no good reason to access that memory so it&#8217;s wasted resources. An example of this is pushing the same view controller over and over again without ever popping/dismissing it. Now you have duplicate view controller instance on the view hierarchy. Not only is this wasted resources, but how do you know which one has the latest changes? Fortunately, this is a rookie mistake and easy to spot.</p>\n<h3>Cached Memory</h3>\n<p>Cache is great thing; whether it be images from the web or data from a database, it saves round trips to the server. However, without proper caching mechanisms in place, they can grow large and drown the resources fast. These are also easy to spot using trivial memory profilers. Implementing caching rules for the specific needs of the apps resolve these issues fast as well. There are some basic rules that can be enforced using the native <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSCache_Class/\" target=\"_blank\" rel=\"noopener\">NSCache</a>, or libraries that offer more sophisticated options, such as <a href=\"https://github.com/Haneke/HanekeSwift\" target=\"_blank\" rel=\"noopener\">HanekeSwift</a>.</p>\n<h2>Clean &amp; Dirty Memory</h2>\n<p>There are some hooks and triggers iOS provides that help guide you to manage memory. First we must understand there is the concept of clean and dirty memory.</p>\n<p>Clean memory is static resources that are loaded into memory that doesn&#8217;t change. They can be recreated at any time, such as system frameworks, binaries, mapped files, etc. The system gets rid of these first when under memory pressure, since it can always recreate it when needed.</p>\n<p>Dirty memory is those that are changed during runtime. The system can&#8217;t recreate these, so it has to use swap space, but iOS doesn&#8217;t have a swap mechanism. So dirty memory will always be kept in physical memory until it reach a certain limit. Then the app will be terminated and all its memory will be recycled by system.</p>\n<p>Before getting to this point, iOS will send a few warnings to your app so you can act accordingly.</p>\n<h3>UIViewController &#8211; didReceiveMemoryWarning</h3>\n<p>You&#8217;ve probably seen it before, but habitually deleted it. When you create new app or view controller, this is the template Xcode creates for you:<br />\n[crayon-5bc36d86b44d4975378917/]<br />\nSee the &#8220;<em>didReceiveMemoryWarning</em>&#8221; function? That&#8217;s where iOS will trigger it&#8217;s warning for your view controller. Ahhhh, that&#8217;s what that&#8217;s for 🙂 . What you&#8217;ll want to do there is purge any of the view controller&#8217;s resources you don&#8217;t necessarily need any more, but can recreate later if so. This is also a good place to purge some cache or database resources so it can be recreated later when needed as well. This is why it is good to create everything in a lazy fashion, so resources are requested as needed, and recreated as needed.</p>\n<h3>AppDelegate &#8211; applicationDidReceiveMemoryWarning</h3>\n<p>Implement the <em>applicationDidReceiveMemoryWarning</em> method of your application delegate. This is where you will set any app-wide references to objects it can safely free to <em>nil</em>. Also in the application delegate, make use of the <em>applicationDidEnterBackground </em>to free any resource so your app isn&#8217;t first line to be terminate from the list of background apps.</p>\n<h3>NSNotificationCenter &#8211; UIApplicationDidReceiveMemoryWarningNotification</h3>\n<p>Subscribe to the <em>NSNotificationCenter</em> if this suits better to free up resources:<br />\n[crayon-5bc36d86b44d9211267356/]<br />\nWith one or more of these in place, you can use the simulator to trigger a memory warning by choosing <em>Hardware &gt; Simulate Memory Warning</em>.</p>\n<h2>Debugging</h2>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/CommonMemoryProblems.html#//apple_ref/doc/uid/TP40004652-CH91-SW1\" target=\"_blank\" rel=\"noopener\">Xcode Instruments</a> is actually quite useful. It will help you monitor memory usage, find abandoned memory, find memory leaks, find zombies, and more.</p>\n<p>To see this in action, <a href=\"https://github.com/iosmentor-io/swift-strong-reference-cycle-sample\" target=\"_blank\" rel=\"noopener\">clone this sample code</a> that has a strong reference cycle in it. Once you&#8217;ve opened it in Xcode, go to <em>Product &gt; Profile</em>. This will open up the Instruments template list, choose &#8220;<em>Leaks</em>&#8220;:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/05/CapturFiles_351-500x381.png\" alt=\"CapturFiles_351\" width=\"500\" height=\"381\" class=\"aligncenter size-medium wp-image-779\" srcset=\"http://basememara.com/wp-content/uploads/2016/05/CapturFiles_351-500x381.png 500w, http://basememara.com/wp-content/uploads/2016/05/CapturFiles_351-768x585.png 768w, http://basememara.com/wp-content/uploads/2016/05/CapturFiles_351-1024x779.png 1024w, http://basememara.com/wp-content/uploads/2016/05/CapturFiles_351.png 1532w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Click the record button and this will run the app in the profiler. Next, click the button I placed in the app labeled &#8220;<em>Trigger Strong Reference Cycle</em>&#8220;. The profiler will display green checkmarks, then boom! A red X will appear to indicate there is a strong reference cycle. It may take awhile for the profiler to catch up, but once you see the red X, stop the recording and click it.</p>\n<p>You will see the backtrace highlighting the leak and associated classes. You can even select <em>Details &gt; Cycle &amp; Roots</em> and see a nice reference graph:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/05/CapturFiles_350-500x360.png\" alt=\"Xcode Instruments Swift\" width=\"500\" height=\"360\" class=\"aligncenter size-medium wp-image-780\" srcset=\"http://basememara.com/wp-content/uploads/2016/05/CapturFiles_350-500x360.png 500w, http://basememara.com/wp-content/uploads/2016/05/CapturFiles_350-768x552.png 768w, http://basememara.com/wp-content/uploads/2016/05/CapturFiles_350-1024x737.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>&nbsp;</p>\n<p>For an actual production app, be sure to eventually use a real device instead of the simulator since low-level details may not be the same.</p>\n<h2>Conclusion</h2>\n<p>Swift is a gorgeous language and it also has smarts. It manages memory across the board. In Objective-C for example, Automatic Reference Counting (ARC) is not supported in procedural-C code and low-level API&#8217;s like Core Graphics. These have been handled in Swift though, so the huge memory leaks that a programmer can have in Objective-C are impossible in Swift. This alone is a big win for Swift. However, this doesn&#8217;t mean we&#8217;re home-free for any language or platform.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language: Automatic Reference Counting</a></li>\n<li><a href=\"http://krakendev.io/blog/weak-and-unowned-references-in-swift\" target=\"_blank\" rel=\"noopener\">Weak, Strong, Unowned, Oh My!</a></li>\n<li><a href=\"https://realm.io/news/hector-matos-memory-management/\" target=\"_blank\" rel=\"noopener\">The Weak, the Strong, and the Unowned</a></li>\n<li><a href=\"https://digitalleaves.com/blog/2015/05/demystifying-retain-cycles-in-arc/\" target=\"_blank\" rel=\"noopener\">Demystifying Retain Cycles in ARC</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2012/242/\" target=\"_blank\" rel=\"noopener\">WWDC 2012: iOS App Performance: Memory</a></li>\n</ul>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n"
      },
      {
        "id": 1714,
        "title": "Full Stack iOS and WordPress in Swift",
        "slug": "full-stack-ios-and-wordpress-in-swift",
        "type": "post",
        "excerpt": "",
        "created": "2017-01-25T14:54:17",
        "modified": "2018-09-30T07:48:30",
        "comment_count": 10,
        "link": "http://basememara.com/full-stack-ios-and-wordpress-in-swift/",
        "author": 2,
        "featured_media": 1739,
        "categories": [
          4,
          55
        ],
        "tags": [
          53,
          50,
          72
        ],
        "content": "<p>WordPress has been around for almost a decade and a half. It survived the CMS wars and remained relevant during the mobile shift. It&#8217;s been battle-tested under various scenarios and load. It showed us what a thriving 3rd party marketplace looks like. Now, WordPress is realizing a grander vision!</p>\n<p>In the release of WordPress 4.7, the <a href=\"https://wptavern.com/wp-rest-api-officially-approved-for-merge-into-wordpress-4-7\" target=\"_blank\" rel=\"noopener\">REST API plugin was merged into core</a> and enabled by default. This means you can request the data format of any WordPress 4.7+ site out there. Go ahead, try this very blog out for yourself: <a href=\"http://basememara.com/wp-json/wp/v2/posts\" target=\"_blank\" rel=\"noopener\">http://basememara.com/wp-json/wp/v2/posts:</a></p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_118-500x800.png\" width=\"300\" height=\"481\" class=\"aligncenter wp-image-1717\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_118-500x800.png 500w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_118-768x1230.png 768w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_118-639x1024.png 639w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_118.png 990w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<p>It&#8217;s what <a href=\"https://www.ted.com/talks/tim_berners_lee_on_the_next_web\" target=\"_blank\" rel=\"noopener\">the next web</a> looks like &#8211; data! WordPress is trying to live beyond the browser, where the Internet is being taken over by IoT, AI, microservices, {<em>enter latest geek buzzword here</em>}, etc. In this post, I&#8217;d like to show how we can leverage WordPress and use it as a solid backend for our native Swift app.</p>\n<h2>The Project Plan</h2>\n<p>It usually helps to work backwards from a goal, so below is the app we will end up with. It&#8217;s actually the <a href=\"https://itunes.apple.com/app/id1021806851\" target=\"_blank\" rel=\"noopener\">live app</a> for this blog and is fully <a href=\"https://github.com/ZamzamInc/SwiftyPress\" target=\"_blank\" rel=\"noopener\">open source</a>:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-464x800.png\" width=\"464\" height=\"800\" class=\"aligncenter wp-image-1718 size-medium\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-464x800.png 464w, http://basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-594x1024.png 594w, http://basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877.png 750w\" sizes=\"(max-width: 464px) 100vw, 464px\" /></p>\n<p>First, a few ground rules before we start building this WordPress app:</p>\n<ul>\n<li><strong>Offline:</strong> The app has to work with no internet connection (that&#8217;s a major advantage over a website!).</li>\n<li><strong>Updates:</strong> The content should be fresh and up-to-date on the app.</li>\n<li><strong>Reusable:</strong> Being able to package this as an app framework and easily used for other WordPress sites.</li>\n</ul>\n<p>The last one might be too ambitious, but I&#8217;ve already done it! See <a href=\"https://itunes.apple.com/app/id992314096\" target=\"_blank\" rel=\"noopener\">this app</a> which uses the same framework, but a different WordPress site and &#8220;theme&#8221;.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_120-462x800.png\" alt=\"\" width=\"462\" height=\"800\" class=\"aligncenter size-medium wp-image-1730\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_120-462x800.png 462w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_120-768x1329.png 768w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_120-592x1024.png 592w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_120.png 786w\" sizes=\"(max-width: 462px) 100vw, 462px\" /></p>\n<p>Ok, now that you know the plan:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/05/lets-begin.jpg\" width=\"250\" height=\"250\" class=\"aligncenter wp-image-712\" srcset=\"http://basememara.com/wp-content/uploads/2016/05/lets-begin.jpg 400w, http://basememara.com/wp-content/uploads/2016/05/lets-begin-150x150.jpg 150w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></p>\n<h2>The Framework</h2>\n<p>As part of our goals, this has to be a framework so we can reuse it. In my previous post, called &#8220;<a href=\"http://basememara.com/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods/\" target=\"_blank\" rel=\"noopener\">Creating Cross-Platform Swift Frameworks</a>&#8220;, I cover how we can setup a fresh Xcode workspace for a framework so it can be distributed across projects. The framework structure will look like this:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_126-335x800.png\" alt=\"\" width=\"335\" height=\"800\" class=\"aligncenter size-medium wp-image-1740\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_126-335x800.png 335w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_126-429x1024.png 429w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_126.png 620w\" sizes=\"(max-width: 335px) 100vw, 335px\" /></p>\n<p>Now we have a place to code!</p>\n<h2>The Configuration</h2>\n<p>Before we go much further, we need a simple and manageable way to store configuration values. I cover how we can read values from a plist file in my <a href=\"http://basememara.com/reading-values-plist-bundle-swift/\" target=\"_blank\" rel=\"noopener\">previous post</a>. In the end, our plist configuration file will look something like this:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_122-500x363.png\" alt=\"\" width=\"500\" height=\"363\" class=\"aligncenter size-medium wp-image-1734\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_122-500x363.png 500w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_122-768x558.png 768w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_122-1024x744.png 1024w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_122.png 1062w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>This way, apps consuming the framework only have to set a few configuration values in a plist file to wire it to their WordPress site, as well as add some look and feel changes. This will get read into memory when the app starts up:<br />\n[crayon-5bc36d86b4b7a687925463/]<br />\nThis is extending Apple&#8217;s native &#8220;<em>UserDefaults</em>&#8221; function called &#8220;<a href=\"https://developer.apple.com/reference/foundation/userdefaults/1417065-register\" target=\"_blank\" rel=\"noopener\">register(defaults:)</a>&#8221; to store a dictionary into the user defaults. In this case, it&#8217;s first converting the plist into a dictionary, then using the underlying native &#8220;<em>register</em>&#8221; call to store the values into user defaults for later use.</p>\n<h2>Ground Zero: The Database</h2>\n<p>An application is only as good as its data. That&#8217;s why it&#8217;s important to think of what the data schema will look like. Seeing what the WordPress JSON looks like out of the box, things can get messy and confusing. Instead, I&#8217;d like to extend the new <a href=\"https://developer.wordpress.org/rest-api/\" target=\"_blank\" rel=\"noopener\">WordPress REST API</a> to provide my own slim, simplified endpoint:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_119-500x572.png\" alt=\"\" width=\"500\" height=\"572\" class=\"aligncenter size-medium wp-image-1722\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_119-500x572.png 500w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_119-768x879.png 768w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_119-894x1024.png 894w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_119.png 1394w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Fortunately, the new REST API is super flexible and well thought out to do this. Below is the WordPress extension point to make this happen, or you can install my WordPress <a href=\"https://github.com/ZamzamInc/SwiftyPress-WP\" target=\"_blank\" rel=\"noopener\">SwiftyPress plugin</a> to get it done (ya, it&#8217;s in PHP):<br />\n[crayon-5bc36d86b4b82525040226/]<br />\nIt&#8217;s mostly boilerplate code, but now I get my own route with endpoints and schemas. Here is what we&#8217;re working with now: <a href=\"http://basememara.com/wp-json/swiftypress/v2/posts\" target=\"_blank\" rel=\"noopener\">http://basememara.com/wp-json/swiftypress/v2/posts</a>. The <a href=\"https://developer.wordpress.org/rest-api/extending-the-rest-api/controller-classes/\">WordPress documentation</a> provides some more details and samples in creating your own custom endpoints.</p>\n<p>Designing the app as <em>offline-first</em> is important so we don&#8217;t jam ourselves into a corner later. So we need a way to persist this data locally in the app to ensure it works offline; for this we will use <a href=\"http://realm.io/docs/swift/latest/\" target=\"_blank\" rel=\"noopener\">Realm</a>. Here&#8217;s how the database will look like in the app:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_121-500x210.png\" alt=\"\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-1731\" srcset=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_121-500x210.png 500w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_121-768x323.png 768w, http://basememara.com/wp-content/uploads/2017/01/CapturFiles_121-1024x430.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>The Models</h2>\n<p>We have our database and the endpoints to update it, now we can start designing our Swift models. Let&#8217;s first start with the &#8220;<em>Post</em>&#8221; model:<br />\n[crayon-5bc36d86b4b8d016511000/]<br />\nNotice my &#8220;<em>convenient init</em>&#8220;, where I can instantiate the model from JSON. I&#8217;m using a Swifty library called <a href=\"https://github.com/delba/JASON\" target=\"_blank\" rel=\"noopener\">JASON</a>, but you can choose another library or manually do the conversion.</p>\n<p>You can see the <a href=\"https://github.com/ZamzamInc/SwiftyPress/tree/master/Sources/Models\" target=\"_blank\" rel=\"noopener\">source code for the other models</a>, but basically I created models for: <em>Media (images), Post, Term (categories and tags), and User (author)</em>.</p>\n<h2>The Service</h2>\n<p>We need a way to query the data from the local Realm and remote WordPress databases. We can create a centralized service per model to do this, such as &#8220;<em>PostService</em>&#8220;:<br />\n[crayon-5bc36d86b4b93131582890/]<br />\nThe first &#8220;<em>get</em>&#8221; function retrieves the posts from the local Realm database. We will also need the &#8220;<em>getFromRemote</em>&#8221; function to retrieve data from the cloud (WordPress), which passes in the remote JSON to the model&#8217;s <em>convenient init</em> to be saved into Realm later.</p>\n<p>To make things maintainable and more elegant, I created a &#8220;<em>PostRouter</em>&#8221; that houses all our REST API calls via <a href=\"https://github.com/Alamofire/Alamofire#routing-requests\" target=\"_blank\" rel=\"noopener\">Alamofire&#8217;s nifty &#8220;<span class=\"s1\"><em>URLRequestConvertible</em>&#8221; protocol</span></a>. This way, the REST API calls can be changed and managed in one place:<br />\n[crayon-5bc36d86b4b96987556121/]<br />\nThis allows me to query the REST API services without knowing the URL or parameters all the time. We&#8217;re ready to connect the pipes to seed the database.</p>\n<h2>App Lift Off!</h2>\n<p>In the launch of the app, we will seed the fresh database with posts saved from the server. In &#8220;<em>AppDelegate.didFinishLaunchingWithOptions</em>&#8221; we will check if the database exists. The first time it will need to be created and seeded with data.</p>\n<p>To do this, we will need a function on our &#8220;<em>PostService</em>&#8221; to update the local data from the remote server. A good way to do this is to query the posts sorted by descending modified date order, then merge them into Realm if the local modified date is older than the server or doesn&#8217;t exist at all:<br />\n[crayon-5bc36d86b4b99385346346/]<br />\nIt retrieves the JSON from WordPress, compares the <em>modified</em> property to the local post model in Realm, then persists it if it is older or doesn&#8217;t exist.</p>\n<p>This is great for updating the last few posts, but seeding the database from scratch will need to be handled different since there can be hundreds or even thousands of posts. We can do this using a recursive function that persists posts via pagination:<br />\n[crayon-5bc36d86b4b9d615869604/]<br />\nThis function calls the previous &#8220;<em>updateFromRemote</em>&#8221; function several times until there are no more pages left. Run this function called <span>&#8220;</span><em>PostService.seedFromRemote</em><span>&#8221; </span>in the <span>&#8220;</span><em>AppDelegate.didFinishLaunchingWithOptions</em><span>&#8221; so the recursive scraping begins!</span></p>\n<h4>Optimizing the App Startup</h4>\n<p>We can achieve a huge performance boost by running the app in our development environment and get the completed database from the app to use as a seed database for new app installs. This is much more performant to copy the seed database instead of querying the data page-by-page and parsing it. Here&#8217;s the function you can use to copy the seed database to the user&#8217;s Realm space:<br />\n[crayon-5bc36d86b4b9f183230975/]<br />\nIt checks if the Realm database exists. If it doesn&#8217;t, it will look for the seed database to copy to the user&#8217;s Realm database path. It will fallback to our recursive function that will seed the database from cloud via REST API and pagination if the seed database doesn&#8217;t exist.</p>\n<p>The seeding of the database should also be running in the &#8220;<em>AppDelegate</em>&#8220;. However, it must be run on first installs only or the database will be overwritten every time. I&#8217;m using a neat library called <a href=\"https://github.com/KyleGoslan/UpdateKit\" target=\"_blank\" rel=\"noopener\">UpdateKit</a> to know when the app is freshly installed or even when the app updates:<br />\n[crayon-5bc36d86b4ba2976890970/]</p>\n<h4>Keeping Posts Updated</h4>\n<p>For subsequent new or modified posts, we will read the last 50 modified posts in the view controller&#8217;s load in a throttled manner using a great library called <a href=\"https://github.com/soffes/RateLimit\" target=\"_blank\" rel=\"noopener\">RateLimit</a>:<br />\n[crayon-5bc36d86b4ba5819632319/]<br />\nGreat, now we should everything we need to build the rest of the app!</p>\n<h2>The UI</h2>\n<p>Since a few pages will need to display posts, such favorites, most popular, and just browsing all or by category, we should create a couple base classes. One for tables and another for collections. Here&#8217;s what the base table class called &#8220;<em>RealmPostTableViewController</em>&#8221; looks like:<br />\n[crayon-5bc36d86b4ba7300192557/]<br />\nTo create the counterpart collection base class, I&#8217;m using a protocol called &#8220;<em>RealmControllable</em>&#8221; <span>to unify the table and collection views. I cover this</span> in my previous post called &#8220;<em><a href=\"http://basememara.com/protocol-oriented-tableview-collectionview/\" target=\"_blank\" rel=\"noopener\">Protocol-Oriented TableView and CollectionView in Swift</a></em>&#8220;.<br />\n[crayon-5bc36d86b4baa476445004/]<br />\nThe Realm &#8220;<em>NotificationToken</em>&#8221; is wiring up the database updates reactively to the table or collection views. When an update happens in the database, it reloads the UI automatically. Also, there is filter and sort functions that the derived view controllers can use easily.</p>\n<p>For the table cell, we are simply binding the data to the cell view and configuring its style:<br />\n[crayon-5bc36d86b4bae974952151/]<br />\nFinally for the view controller, we will end up with something super lightweight and flexible:<br />\n[crayon-5bc36d86b4bc2887919020/]<br />\nWe can use this rapid development pattern for all our view controllers that need to display a list of posts. For example, here&#8217;s one that displays a user&#8217;s favorite posts:<br />\n[crayon-5bc36d86b4bc5660148184/]</p>\n<h2>The App</h2>\n<p>After getting all our framework pieces in place, our apps will be super lightweight but still configurable. Here&#8217;s what an app using the framework will look like:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_124.png\" alt=\"\" width=\"408\" height=\"484\" class=\"aligncenter size-full wp-image-1737\" /></p>\n<p>That&#8217;s incredibly light! Updating the framework underneath would update the all apps across all our projects at once. For wiring it to the framework, all that&#8217;s needed is the &#8220;<em>Settings.plist</em>&#8221; to store your app and WordPress configurations, and an HTML file used as a template for your post detail views (using <a href=\"https://github.com/kylef/Stencil\" target=\"_blank\" rel=\"noopener\">Stencil</a> to bind the values to the HTML). Of course, finally the AppDelegate code to glue the framework to the app&#8217;s lifecycle:<br />\n[crayon-5bc36d86b4bc9004610146/]<br />\nThat&#8217;s it! Here&#8217;s what the app looks like with only a few files in the app source code:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png\" alt=\"\" width=\"391\" height=\"508\" class=\"aligncenter size-full wp-image-1739\" /></p>\n<h2>Conclusion</h2>\n<p>Although this post was about WordPress, the concepts are generic enough to extend the framework to support different providers. This would allow integrating other CMS or REST endpoint with the same code. As long as the JSON structure is the same then you&#8217;re good, but even the JSON structure can be abstracted away under each provider model for even more flexibility.</p>\n<p>To view the full working source code, see <a href=\"https://github.com/ZamzamInc/SwiftyPress\" target=\"_blank\" rel=\"noopener\">SwiftyPress GitHub repo</a>. The big payoff is replicating this for multiple WordPress sites becomes a breeze 😉</p>\n<p><strong><em>Happy Coding!!</em></strong></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n"
      },
      {
        "id": 41294,
        "title": "So Swift, So Clean Architecture for iOS",
        "slug": "swift-clean-architecture",
        "type": "post",
        "excerpt": "The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless. In this post, we will examine the Clean Architecture for building scalable apps in iOS.",
        "created": "2018-04-22T18:03:20",
        "modified": "2018-09-30T07:47:51",
        "comment_count": 10,
        "link": "http://basememara.com/swift-clean-architecture/",
        "author": 2,
        "featured_media": 41346,
        "categories": [
          55
        ],
        "tags": [
          79,
          53,
          14,
          62,
          50
        ],
        "content": "<blockquote><p>You are not paid to code; you are paid to create solutions.</p></blockquote>\n<p>The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless. In this post, we will examine the Clean Architecture for building scalable apps in iOS.</p>\n<h2>What About Bob?</h2>\n<p>The Clean Architecture was coined by Uncle Bob almost 20 years ago. It is independent of platforms, frameworks, databases, or UI. It is testable. It&#8217;s a way of life (ok, software life). Sound good?</p>\n<p>If you have an hour to spare for learning, I highly suggest watching this lecture called <strong>The Principles of Clean Architecture by Uncle Bob Martin</strong> <em>(skip to 10:00 if you don&#8217;t want the biology lesson, although still interesting)</em>:</p>\n<p><iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/o_TH-Y78tt4?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<h2>A Thing About Screaming Architecture</h2>\n<p>Regarding project structure, let&#8217;s first get the feature vs. type debate out the way. The application should scream what it does without any IDE or explanation at all. Anyone should be able to open up the file system and know exactly what the application does. Take a look at the two apps below:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/04/feature-vs-type-project.png\" alt=\"\" width=\"266\" height=\"568\" class=\"aligncenter size-full wp-image-41299\" /></p>\n<p>In the first app, all it tells me is that it&#8217;s an MVC project and has something to do with products and users. Why do I have to know MVC to figure out what it does? I have to compile and run it in my mind to figure out what it does. What&#8217;s worse, I have to expand all the folders to start investigating. In a complex app, imagine hundreds of controllers or views polluting your eyes. Maintaining and debugging are nightmare too, jumping back and forth between folders is like a game of ping pong.</p>\n<p>Now take a look at the second app. Right off the bat, I can tell it lists products, displays it, and shows a user&#8217;s profile. I don&#8217;t have to expand the folders to know what it is. I don&#8217;t have to know what framework or pattern it&#8217;s using. I don&#8217;t even have to know what language it&#8217;s written in!</p>\n<p>Another way to look at it is would you rather organize drawers by just throwing everything into three drawers, or is it better to have several small well-defined and well-labeled drawers?</p>\n<p>Ok let&#8217;s move on&#8230;</p>\n<h2>The Anatomy of the Clean Architecture</h2>\n<p>There are actually many variations and flavours of the Clean Architecture. You&#8217;ve probably heard of <a href=\"https://mutualmobile.com/posts/meet-viper-fast-agile-non-lethal-ios-architecture-framework\" target=\"_blank\" rel=\"noopener\">VIPER</a> or <a href=\"https://clean-swift.com\" target=\"_blank\" rel=\"noopener\">Clean Swift</a>. When you jump into other platforms like Android or .NET, there even exists more flavours. The one I will show you in this post was <em>heavily</em> inspired by Clean Swift. I put my own spin to it after battle-testing it and maintaining it across several teams, platforms, and environments.</p>\n<p>To get started, we have to get some terminology out the way. Below are a list of components in the architecture:</p>\n<ul>\n<li><strong>View:</strong> The interface where user interactions occur, such as the <code>Storyboard</code> or <code>XIB</code>.</li>\n<li><strong>Controller:</strong> The layer which binds the view to code, this being the <code>UIViewController</code> in our case.</li>\n<li><strong>Interactor:</strong> The business logic layer where the controller must send requests through.</li>\n<li><strong>Presenter:</strong> The layer that formats the response from the Interactor and sends it back to the controller.</li>\n<li><strong>Router:</strong> The layer that transports the user to another use case scene, usually an event that occurs in the controller.</li>\n</ul>\n<p>The core pieces of the architecture is the <em>Controller, Interactor, and Presenter</em>. The important thing to notice is that it has a uni-directional flow! This tremendously reduces complexity and makes it easy to manage. Since a picture is worth a thousand words, I have summed up the entire architecture in a single diagram:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2-500x518.png\" alt=\"\" width=\"500\" height=\"518\" class=\"aligncenter wp-image-41346 size-medium\" /></p>\n<p>Follow the flow below to understand how the architecture works:</p>\n<ol>\n<li>User interacts with <strong><em>View</em></strong></li>\n<li><strong><em>Controller</em></strong> event fires, builds a request model, and calls the <strong><em>Interactor</em></strong></li>\n<li>The <strong><em>Interactor</em></strong> calls the underlying core library with all your workers to access the data (could even subscribe to an observable here if needed)</li>\n<li>The <strong><em>Interactor</em></strong> receives data from the worker and wraps it in a response model to send to the <strong><em>Presenter</em></strong></li>\n<li>The <strong><em>Presenter</em></strong> calls app-level helpers if needed to format or localize the response and builds a view model to send to the <strong><em>Controller</em></strong></li>\n<li>The <strong><em>Controller</em></strong> receives the view model in a function and binds it to the <strong><em>View</em></strong></li>\n<li>Repeat the cycle&#8230;</li>\n</ol>\n<p>Also notice the architecture is cross-platform. It doesn&#8217;t care that the view is served by an iOS app, Android app, web browser, or even a REST API endpoint. Once it gets past the view, everything should be identical across platforms. In fact, an iOS and Android app can be eerily similar with just the <code>Storyboard</code> vs <code>Layout</code> being the difference. Even the iOS <code>UIViewController</code> and Android <code>Activity</code> code would almost be identical except for the binding logic. This makes collaboration and bug fixing tight between teams!</p>\n<h2>The Details</h2>\n<p><img src=\"http://basememara.com/wp-content/uploads/2018/04/show_me_the_code.jpg\" alt=\"\" width=\"306\" height=\"165\" class=\"aligncenter size-full wp-image-41304\" /></p>\n<p>It&#8217;s time to see how this plays out in code. We can do this by first examining the protocols that is the blueprint for a use case; this is important so the boundaries are defined and components are decoupled:<br />\n[crayon-5bc36d86b5e9b522314026/]<br />\nHere&#8217;s what happens when the controller loads via <code>viewDidLoad</code>: <em>interactor.fetchProducts &gt; presenter.presentFetchedProducts &gt; controller.displayFetchedProducts</em>. Do you see it yet? The cycle is there. Let&#8217;s take another look&#8230;</p>\n<p><em>Controller:</em><br />\n[crayon-5bc36d86b5ea5545618476/]<br />\nThe controller creates the instances to the interactor, injects the presenter, and also creates the router. When loaded, it creates a request model and calls the interactor:<br />\n[crayon-5bc36d86b5ea9427228919/]<br />\nThe <code>fetchProducts</code> function in the interactor calls the injected <code>productsWorker</code> (DI was left out for clarity, see my other post <a href=\"http://basememara.com/swift-protocol-oriented-dependency-injection/\" target=\"_blank\" rel=\"noopener\">Swifty Dependency Injection</a> for that topic). Underneath, it will call the appropriate storage, whether it be Core Data, Realm, or even a file system&#8230; the architecture doesn&#8217;t care and could be swapped out without affecting the cycle! When the data returns from the data storage asynchronously, it will wrap it in a response model and send it to the presenter:<br />\n[crayon-5bc36d86b5ead441993745/]<br />\nThe presenter will convert the response into a view model, applying any formatting and localization, and call the controller function to display it. The view model properties are almost always strings because the view will just display. If the interactor gave the presenter an error, it will even create a view model out of the error and let the controller display it.</p>\n<p>The models are encapsulated in an enum and are only relevant to its own use case. You do not cross boundaries without being wrapped in one of the models:<br />\n[crayon-5bc36d86b5eb0050715972/]<br />\nFinally the router in case the controller has to send the user to another use case:<br />\n[crayon-5bc36d86b5eb3400809884/]<br />\nThis way, the the controller is decoupled from the routing decisions and can be used from the controller as: <code>router.showProduct(for: productID)</code>.</p>\n<h2>Conclusion</h2>\n<p>The Clean Architecture is flexible, scalable, and maintainable. Although it is more verbose than other architecture designs, it is necessary so components are not tightly coupled. That means everything must reference each other by its protocol, not its concrete types. And when crossing boundaries, data must be wrapped in request / response models, or again components will be coupled. In a future post, I will discuss how to unit test the whole stack.</p>\n<p>See a <a href=\"https://github.com/iosmentor-io/Swift-Clean-Architecture\" target=\"_blank\" rel=\"noopener\">working example of this Clean Architecture</a> to try it out for yourself.</p>\n<p><em><strong>HAPPY CODING!!</strong></em></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n"
      },
      {
        "id": 652,
        "title": "Creating Cross-Platform Swift Frameworks for iOS, watchOS, and tvOS via Carthage and CocoaPods",
        "slug": "creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods",
        "type": "post",
        "excerpt": "In this post, I'd like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via Carthage and CocoaPods. It's a technique I use to share frameworks across all my apps and with the community.",
        "created": "2016-03-22T13:32:30",
        "modified": "2018-09-30T07:44:00",
        "comment_count": 21,
        "link": "http://basememara.com/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods/",
        "author": 2,
        "featured_media": 675,
        "categories": [
          64,
          55
        ],
        "tags": [
          61,
          52,
          50,
          47
        ],
        "content": "<p>The title is a mouth-full, but so is creating cross-platform frameworks. In this post, I&#8217;d like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via <a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a> and <a href=\"https://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a>. It&#8217;s a technique I use to share frameworks across all my apps and with the community. Note this will only target <em>iOS 8</em> above because of dynamic frameworks. Ready?</p>\n<h2>Creating the Project</h2>\n<p>First, let&#8217;s create an empty project. When I say empty, I literally mean empty. From Xcode, choose a template under <em>&#8220;Other &gt; Empty&#8221;</em>:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_308-500x354.png\" alt=\"Xcode Empty Project\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-653\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_308-500x354.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_308-768x544.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_308-1024x725.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_308.png 1444w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>From here, you can start creating your targets per platform. You can do this under <em>&#8220;File &gt; New &gt; Target&#8221;</em>. Choose the <em>&#8220;Cocoa Touch Framework&#8221;</em> template under <em>&#8220;iOS &gt; Framework &amp; Library&#8221;</em>. You can call it <em>&#8220;MyModule iOS&#8221;</em>. Do not check <em>&#8220;Include Unit Tests&#8221;</em>, we will do this later.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_309-500x467.png\" alt=\"Xcode iOS Framework\" width=\"500\" height=\"467\" class=\"aligncenter size-medium wp-image-672\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_309-500x467.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_309-768x718.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_309-1024x957.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now do the same for <em>&#8220;watchOS &gt; Framework &amp; Library&#8221;</em> and <em>&#8220;tvOS &gt; Framework &amp; Library&#8221;</em>.</p>\n<p>Next, create an empty folder called <em>&#8220;Sources&#8221;</em> and add it to the project. This is where all your code will go. This convention is meant to be forward-compatible with the <a href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noopener\">Swift Package Manager</a> when Swift 3 comes out 😉</p>\n<p>So far, your project should look something like this:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_310.png\" alt=\"Xcode framework new project\" width=\"404\" height=\"218\" class=\"aligncenter size-full wp-image-654\" /></p>\n<h2>The Info.plist Files</h2>\n<p>Now that we have our foundation to our project, it&#8217;s time to fix it up so the platforms play nice together against the same code base. Let&#8217;s take care of the <em>&#8220;Info.plist&#8221;</em> files. Go into each platform folder created above and start appending the platform name after the <em>&#8220;Info.plist&#8221;</em> files. For example for iOS, rename the file to <em>&#8220;Info-iOS.plist&#8221;</em>.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_311-500x159.png\" alt=\"Xcode plist file iOS\" width=\"500\" height=\"159\" class=\"aligncenter size-medium wp-image-655\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_311-500x159.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_311-768x245.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_311.png 816w\" sizes=\"(max-width: 500px) 100vw, 500px\" />Once you have done this for each platform, move them all into the <em>&#8220;Sources&#8221;</em> folder:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_312-500x143.png\" alt=\"Xcode plist files platforms\" width=\"500\" height=\"143\" class=\"aligncenter size-medium wp-image-656\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_312-500x143.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_312.png 684w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now you can add the <em>.plist</em> files into the project by right-clicking on your <em>&#8220;Sources&#8221;</em> folder in Xcode and select <em>&#8220;Add files&#8221;</em>. Uncheck <em>&#8220;Copy items if needed&#8221;</em>, select <em>&#8220;Create groups&#8221;</em>, and make sure none of the Target Memberships are selected. Your Xcode project should look like this so far:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_313.png\" alt=\"Xcode source 1\" width=\"394\" height=\"404\" class=\"aligncenter size-full wp-image-657\" /></p>\n<p>Now we need to update the <em>&#8220;Build Settings&#8221;</em> to point to the respective <em>.plist</em> file name and location for each platform target. So for the iOS target, go to <em>&#8220;Build Settings &gt; Packaging &gt; Info.plist File&#8221;</em>. From here, put in the relative path to the <em>.plist</em> file with the appended platform name you did earlier:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_315-500x241.png\" alt=\"Xcode Info.plist Packaging Build Settings\" width=\"500\" height=\"241\" class=\"aligncenter size-medium wp-image-659\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_315-500x241.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_315-768x371.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_315-1024x494.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Finally for the <em>.plist</em> files, delete the entry under &#8220;Build Phases &gt; Copy Bundle Sources&#8221;. This was just a side-effect of adding the files into the Xcode project, but we don&#8217;t need to copy the bundle since it is taken care of in the previous step when we updated the path in the build settings. Here is the entry you must delete for each platform target:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_316-500x201.png\" alt=\"Xcode Build Settings Copy Bundle Resources\" width=\"500\" height=\"201\" class=\"aligncenter size-medium wp-image-660\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_316-500x201.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_316-768x308.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_316-1024x411.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>The Header Files</h2>\n<p>Unfortunately, we have to live with <em>Objective-C</em> for awhile, so let&#8217;s handle our header file so <em>Objective-C</em> projects can consume our <em>Swift</em> framework and be cool again. Go to the <em>&#8220;.h&#8221;</em> file Xcode created for you under the iOS folder and remove the platform name from the names in the source code:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_317-500x164.png\" alt=\"Xcode framework header file\" width=\"500\" height=\"164\" class=\"aligncenter size-medium wp-image-661\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_317-500x164.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_317-768x251.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_317-1024x335.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_317.png 1534w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Above, I removed <em>&#8220;</em><span><em>_iOS&#8221;</em> from <em>&#8220;ZamzamKitData_iOSVersionNumber&#8221;</em> and <em>&#8220;ZamzamKitData_iOSVersionString&#8221;</em>. Save the file then rename it to remove <em>&#8221; iOS&#8221;</em> from the file name. Next drag it into the <em>&#8220;Sources&#8221;</em> folder.</span></p>\n<p>Go to Finder and you&#8217;ll notice it&#8217;s not really in the &#8220;Sources&#8221; folder, but still in the iOS target folder. So manually move it to the <em>&#8220;Sources&#8221;</em> folder from Finder. This will break your project, so go back to Xcode and update the location AND while you&#8217;re at it select all of the <em>&#8220;Target Memberships&#8221; </em>and select <em>&#8220;Public&#8221;</em>:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_318-500x203.png\" alt=\"Xcode header file\" width=\"500\" height=\"203\" class=\"aligncenter size-medium wp-image-662\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_318-500x203.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_318-768x312.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_318-1024x416.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now you can delete the platform folders from the project and <em>&#8220;Move to Trash&#8221;</em> when prompted. Our code will go in the &#8220;Sources&#8221; folder going forward, not these target folders. Remember, your framework targets are still available to us, we just don&#8217;t need the folders Xcode created for us. At this point, your project should look a lot cleaner:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_319-500x310.png\" alt=\"Xcode project 2\" width=\"500\" height=\"310\" class=\"aligncenter size-medium wp-image-663\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_319-500x310.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_319-768x475.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_319-1024x634.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_319.png 1234w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Go ahead and add a <em>Swift</em> code file in the <em>&#8220;Sources&#8221;</em> folder to try it out. You&#8217;ll be able to toggle which <em>&#8220;Target Memberships&#8221;</em> this code file is for (iOS, watchOS, tvOS, or all of them).</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_320.png\" alt=\"Xcode cross-platform file\" width=\"402\" height=\"370\" class=\"aligncenter size-full wp-image-664\" /></p>\n<h2>The Build Settings</h2>\n<p>Let&#8217;s update our <em>&#8220;Build Settings&#8221;</em> to accommodate the cross-platform architecture we created. For each of the platform targets, go to <em>&#8220;Build Settings &gt; Packaging &gt; Product Name&#8221;</em> and remove the appended platform name, so it will be an identical name for all the platforms so they are packaged as one product:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_321-500x345.png\" alt=\"Xcode build settings product name\" width=\"500\" height=\"345\" class=\"aligncenter size-medium wp-image-665\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_321-500x345.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_321-768x531.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_321-1024x707.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>For Carthage support, you&#8217;ll have to make your targets <em>&#8220;Shared&#8221;</em>. To do this <em>&#8220;Manage Schemes&#8221;</em> and check the <em>&#8220;Shared&#8221;</em> areas:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_329-500x166.png\" alt=\"Xcode Manage Scheme Shared\" width=\"500\" height=\"166\" class=\"aligncenter size-medium wp-image-671\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_329-500x166.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_329-768x255.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_329-1024x340.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_329.png 1524w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>These next steps aren&#8217;t necessary, but I highly recommend them:</p>\n<ol>\n<li>Set <em>&#8220;Require Only App-Extension-Safe API&#8221;</em> to <em>&#8220;Yes&#8221;</em>. This will allow your framework to be used in extensions like the <em>Today Widget</em>, which have tighter restrictions. If you do something in your code that breaks this restriction, you&#8217;ll get a compile error right away so you can think of a different approach to your code. This is better than later finding out that you need to use your framework in an extension and have to re-architect some parts of your code.</li>\n<li>This is more of a business/management decision, but for my apps I usually support a minimum of <em>iOS 8.4</em>, <em>watchOS 2.0</em>, and <em>tvOS 9.0</em>. The reason is because iOS 8.4 has some goodies not available in previous version, such as support for Apple Watch and security updates. Plus this is just some of the perks of developing for the Apple ecosystem instead of Android <span>😉</span>. Check out your app stats and don&#8217;t end up supporting older version just for one or two people. This setting should be configured under your <em>&#8220;Project &gt; Info &gt; Deployment Target&#8221;</em>. This will be inherited to the target frameworks. However, for the watchOS and tvOS targets, you&#8217;ll have to go <em>&#8220;Build Settings &gt; Deployment &gt; watchOS/tvOS Deployment Target&#8221;</em> and set it to 2.0/9.0. Don&#8217;t worry though, you&#8217;ll be coding against the latest SDK versions across the board using the <em>&#8220;Base SDK&#8221;</em> setting. You are just supporting older versions with the <em>&#8220;Deployment Target&#8221;</em> and will get warned by the compiler if something in your code is not supported in an older version you&#8217;re trying to support.<img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_327-500x124.png\" alt=\"Xcode iOS Deployment Target\" width=\"500\" height=\"124\" class=\"aligncenter size-medium wp-image-667\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_327-500x124.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_327-768x190.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_327-1024x253.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_327.png 1336w\" sizes=\"(max-width: 500px) 100vw, 500px\" /><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_328-500x99.png\" alt=\"Xcode watchOS Deployment Target\" width=\"500\" height=\"99\" class=\"aligncenter size-medium wp-image-668\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_328-500x99.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_328-768x153.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_328-1024x203.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></li>\n</ol>\n<h2>The Meta Data</h2>\n<p>Let&#8217;s create a <em>&#8220;Metadata&#8221;</em> folder and add some miscellaneous files such as a read me, license, podspec, etc. This is what I have:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_323-500x224.png\" alt=\"Xcode meta data folder\" width=\"500\" height=\"224\" class=\"aligncenter size-medium wp-image-669\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_323-500x224.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_323-768x344.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_323-1024x458.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>When you add these files to your project, make sure to remove them from the <em>&#8220;Build Phases &gt; Compile Sources&#8221;</em> and <em>&#8220;Build Phases &gt; Copy Bundle Resources&#8221; </em>since they don&#8217;t need to be compiled.</p>\n<h2>The Workspace</h2>\n<p><em>Are you still with me? Trust me, the end game is worth it&#8230; just a little bit longer&#8230;</em></p>\n<p>Save your project as a workspace by going to <em>&#8220;File &gt; Save As Workspace&#8221;</em>. Call it the same as your project and save it in the root of your project folder. Now close the project and open this new workspace.</p>\n<p>Also for convenience, add a Playground file so you can sketch some ideas out while dreaming up some code. Go to <em>&#8220;File &gt; New &gt; Playground&#8221;</em> and call it the same name as your workspace. Close the playground and add it to your workspace as a sibling, not a child, of your project.</p>\n<h2>The Tests</h2>\n<p>Add a new target to your Xcode project. I like to add these templates for unit testing and sample demos:</p>\n<ol>\n<li><em>iOS &gt; Test &gt; iOS Unit Testing Bundle</em></li>\n<li><em>iOS &gt; Application &gt; Tabbed Application</em></li>\n<li><em>watchOS &gt; Application &gt; WatchKit App</em></li>\n<li><em>tvOS &gt; Test &gt; TV Unit Testing Bundle</em></li>\n</ol>\n<h2>The Big Picture</h2>\n<p>I commend you for reading this far! Here&#8217;s how your workspace should look like:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_324-500x519.png\" alt=\"Xcode Framework Project\" width=\"500\" height=\"519\" class=\"aligncenter size-medium wp-image-670\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_324-500x519.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_324-768x796.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_324-987x1024.png 987w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_324.png 1026w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>I created some empty folders in the <em>&#8220;Sources&#8221;</em> folder as a convention for my frameworks, but of course add your own flavor.</p>\n<p>Finally, add your workspace to git or some source control and add any dependencies you&#8217;d like your framework to use. Check out <a href=\"https://robots.thoughtbot.com/creating-your-first-ios-framework\" target=\"_blank\" rel=\"noopener\">this excellent blog post</a> for details on how to do that.</p>\n<p>See below how you can select which platform to target per file:</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png\" alt=\"Xcode Cross Platform File\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-675\" srcset=\"http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png 500w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-768x323.png 768w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-1024x430.png 1024w, http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330.png 1218w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Also notice you can even have more granular control within the code using <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID34\" target=\"_blank\" rel=\"noopener\">Swift Conditional Compilation</a> *if needed*. I advise against it since segmenting your file into different platforms is not very elegant and can be messy. Instead, use protocol extensions to segment code <span>💡</span></p>\n<h2>Conclusion</h2>\n<p>It was a long journey, but now you&#8217;re ready to rock some code and support multiple platforms with a single code base. When adding new code files, just select the <em>&#8220;Target Memberships&#8221;</em> you&#8217;d like to support for that particular code file. And <a href=\"http://basememara.com/unit-testing-in-swift-xcode-and-beyond/\">don&#8217;t forget to unit test</a>&#8230; 😉</p>\n<p><strong><em>Happy Coding!!</em></strong></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n"
      },
      {
        "id": 41276,
        "title": "Swifty Protocol-Oriented Dependency Injection",
        "slug": "swift-protocol-oriented-dependency-injection",
        "type": "post",
        "excerpt": "The key to dependency injection is protocols. From there sprouts many variations, flavours, and techniques. Although this is yet another dependency injection™ blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection.",
        "created": "2018-04-11T17:34:11",
        "modified": "2018-05-15T06:55:12",
        "comment_count": 8,
        "link": "http://basememara.com/swift-protocol-oriented-dependency-injection/",
        "author": 2,
        "featured_media": 41287,
        "categories": [
          55
        ],
        "tags": [
          62,
          50
        ],
        "content": "<p>The key to dependency injection is protocols &#8211; from there sprouts many variations, flavours, and techniques. Although this is <em>yet another dependency injection™</em> blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection that works great with unit test and even frameworks.</p>\n<h2>The Dependency Container</h2>\n<p>The first thing we must do is come up with a container that will house all our dependencies. This will be referenced later from consumers to grab dependencies they want.<br />\n[crayon-5bc36d86b6d04068082244/]<br />\nNow that we got the blueprint to our container and its dependency protocols, let&#8217;s implement the concrete dependency instances:<br />\n[crayon-5bc36d86b6d0d931643561/]<br />\nThis is where the main meat of the dependency injection occurs. The dependency objects implement the protocols so the concrete types are hidden from the caller. This way, the dependency types can be swapped out underneath without affecting the rest of the application.</p>\n<p>Also notice that some dependencies reference other dependencies within the container. The implications of this is powerful because you are building a dependency graph and any part of it can be changed which will cascade.</p>\n<h2>The Dependencies</h2>\n<p>There are no singleton dependencies in our container because we always want to deal with immutable objects, otherwise state management will bite you later. Instead, its a factory serving fresh instances. The dependencies are <code>structs</code> that implement the protocols.</p>\n<p>Here&#8217;s an example of some of the dependencies:<br />\n[crayon-5bc36d86b6d10211003641/]<br />\nWe&#8217;re using classic constructor injection to feed the dependencies in.</p>\n<p>The <code>HTTPService</code> dependency handles the raw network requests/responses and where you would <code>import Alamofire</code> for example. Never leak your 3rd-party dependencies to the rest of the app! Instead, encapsulate it under one of your custom dependencies. That&#8217;s what <code>HTTPService</code> will do for <code>Alamofire</code>.</p>\n<p>Now based on our dependency container, <code>HTTPService</code> gets injected into <code>AuthenticationNetworkService</code> so it can make the REST API endpoint calls. It doesn&#8217;t know that it&#8217;s using <code>Alamofire</code> underneath and can be completely swapped out for another network library or <code>URLSession</code>.</p>\n<p>From here, <code>AuthenticationNetworkService</code> gets injected into <code>AuthenticationWorker</code> that gets referenced by the rest of the app. This way, the REST API server or endpoints can be completely swapped out and your app wouldn&#8217;t have to know. It would still call the <code>AuthenticationWorker</code> API&#8217;s.</p>\n<h2>The Injection</h2>\n<p>It&#8217;s now time to start using our dependency container. We will use a protocol extension to pass in the dependency container so the caller can start resolving the dependency types it wants.</p>\n<p>We need a singleton to hold a reference to the dependency container. So although we couldn&#8217;t get away from singletons altogether, the dependency container is a factory and still serving immutable instances.<br />\n[crayon-5bc36d86b6d16771909142/]<br />\nThe <code>DependencyInjector</code> should be configured early on in the app lifecycle. That way, your frameworks can have its own dependency container, such as <code>CoreDependency</code>, and consumers can override any of the dependencies it desires. This works great for consumers who want to use a different <code>UserDefaults</code> app group or Keychain access group.</p>\n<p>We do this in the <code>willFinishLaunchingWithOptions</code>:<br />\n[crayon-5bc36d86b6d1a093810328/]<br />\nFinally, the protocol extension for <code>HasDependencies</code> is used to provide the dependency container to whoever wants it:<br />\n[crayon-5bc36d86b6d1d310593202/]</p>\n<h2>The Unit Test</h2>\n<p>Not only does this dependency injection work great for frameworks, but of course works great for unit tests. It can be configured on a global and scoped level too!</p>\n<p>For the global level of your unit tests, you can create a <code>TestDependency</code> that subclasses <code>CoreDependency</code>:<br />\n[crayon-5bc36d86b6d20026203586/]<br />\nYou set this in your <code>setUp()</code> function of your test case:<br />\n[crayon-5bc36d86b6d22027069443/]<br />\nWhat&#8217;s even more powerful is you can create a scoped dependency container for a specific test case, see <code>ScopedDependency</code>:<br />\n[crayon-5bc36d86b6d26056516616/]</p>\n<h2>Conclusion</h2>\n<p>The combination of a dependency container, a protocol extension to expose it, and immutable dependencies give you a pure Swift DI that works well with frameworks and unit tests. See this <a href=\"https://github.com/iosmentor-io/Pure-Swift-DI\" target=\"_blank\" rel=\"noopener\">working example</a> to try it out.</p>\n<p><em><strong>HAPPY CODING!!</strong></em></p>\n<h2>More Reading</h2>\n<ul>\n<li><a href=\"https://www.swiftbysundell.com/posts/dependency-injection-using-factories-in-swift\" target=\"_blank\" rel=\"noopener\">Dependency injection using factories in Swift</a></li>\n<li><a href=\"http://www.danielhall.io/a-swift-y-approach-to-dependency-injection\" target=\"_blank\" rel=\"noopener\">A Swift-y Approach to Dependency Injection</a></li>\n<li><a href=\"http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/\" target=\"_blank\" rel=\"noopener\">Using protocol compositon for dependency injection</a></li>\n</ul>\n"
      },
      {
        "id": 41256,
        "title": "Thin AppDelegate with Pluggable Services",
        "slug": "pluggable-appdelegate-services",
        "type": "post",
        "excerpt": "Many techniques have been tried to tame the AppDelegate beast, usually ending up in moving code into private functions or extensions. However, the AppDelegate is much more complex than just moving code around. In this post, let's examine a pluggable service technique with a few bonuses at the end.",
        "created": "2018-02-16T13:24:43",
        "modified": "2018-04-24T07:13:57",
        "comment_count": 0,
        "link": "http://basememara.com/pluggable-appdelegate-services/",
        "author": 2,
        "featured_media": 41258,
        "categories": [
          4,
          55
        ],
        "tags": [
          56,
          53,
          50
        ],
        "content": "<p>Many techniques have been tried to tame the <code>AppDelegate</code> beast, usually ending up in moving code into private functions or extensions. However, the <code>AppDelegate</code> is much more complex than just moving code around. In this post, let&#8217;s examine a pluggable service technique <a href=\"https://medium.com/ios-os-x-development/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\">inspired by Martín Ortiz</a> with a few bonuses at the end.</p>\n<h2>AppDelegate: With Great Power Comes Great Responsibilit(ies)</h2>\n<p>Being the entry point for the app, everyone wants in on the action. From push notifications, deep links, theme setup, logger initialization.. the list goes on. Not to mention all the 3rd party SDK&#8217;s who want to plug into your app lifecycle too. Eventually your <code>AppDelegate</code> looks like this:<br />\n[crayon-5bc36d86b72b0935931726/]<br />\n<img src=\"http://basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png\" alt=\"\" width=\"414\" height=\"306\" class=\"aligncenter size-full wp-image-41258\" /></p>\n<p>This would be a nightmare to maintain. Fortunately, there&#8217;s a better way! It involves shifting the responsibilities to pluggable services.</p>\n<h2>Application Services to the Rescue!</h2>\n<p>Instead of dumping all the responsibilities on <code>AppDelegate</code>, let&#8217;s create an <code>ApplicationService</code> protocol that will plug into the app life cycle. Eventually your app delegate will look this:<br />\n[crayon-5bc36d86b72bc610625025/]<br />\n<img src=\"http://basememara.com/wp-content/uploads/2018/04/appdelegate_whoa-2.gif\" alt=\"\" width=\"500\" height=\"230\" class=\"size-medium wp-image-41267 aligncenter\" /></p>\n<h2>Tell Me More!!</h2>\n<p>To accomplish this, we first create a protocol the <code>AppDelegate</code> services will conform to:<br />\n[crayon-5bc36d86b72c1612095531/]<br />\nThis simply mirrors the <code>AppDelegate</code> events which we will plug into just a bit. Notice the protocol functions are optional because not all services will need to tap into all the events all the time.</p>\n<p>Next, we create a super class for our <code>AppDelegate</code> to bind the events to each of the services:<br />\n[crayon-5bc36d86b72c5122607264/]<br />\nWhat&#8217;s happening is the <code>services()</code> function is exposed for the <code>AppDelegate</code> to override in order to provide the services that want to plug and play. The <code>PluggableApplicationDelegate</code> will create a lazy property to prevent multiple instantiation of the services, then will finally call those functions when each of the app event fires.</p>\n<p>The <code>AppDelegate</code> inherits from the <code>PluggableApplicationDelegate</code> and provides the service instances it desires:<br />\n[crayon-5bc36d86b72c9497227666/]<br />\nAnd one of the application services would look something like this:<br />\n[crayon-5bc36d86b72cc858181178/]<br />\nNow the <code>AppDelegate</code> is scalable and maintainable! Instead mixing responsibilities in the same object, your pluggable service binds to the app lifecycle and manages its own processes.</p>\n<h2>BONUS: Pluggable UIViewController!</h2>\n<p>The <code>UIViewController</code> can reap the benefits by leveraging the same technique too. We will create a <code>ControllerService</code> protocol for those that want to plug and play into the view controller life cycle:<br />\n[crayon-5bc36d86b72cf027437060/]<br />\nThen we create a super <code>UIViewController</code> class that will bind the services to its events:<br />\n[crayon-5bc36d86b72d1354161821/]<br />\nAnd finally, your view controller will end up like this:<br />\n[crayon-5bc36d86b72d4732048480/]<br />\nAn example of a controller service would be:<br />\n[crayon-5bc36d86b72e2502734878/]<br />\nThe controller services will have their functions triggered when the <code>UIViewController</code> events fire.</p>\n<h2>BONUS 2: Pluggable Application for Android!</h2>\n<p>This technique is cross-platform and can actually work for Android as well&#8230; your Android team will thank you! This is what the <code>ApplicationService</code> interface and <code>PluggableApplication</code> base class look like:<em></em><br />\n[crayon-5bc36d86b72e5965763786/]<br />\nAnd the <code>FragmentService</code> and <code>PluggableFragment</code> base class:<br />\n[crayon-5bc36d86b72e8799871077/]<br />\nYou finally end up with a clean <code>Application</code> like this:<br />\n[crayon-5bc36d86b72ee196127738/]</p>\n<h2>Conclusion</h2>\n<p>The pluggable service technique will greatly reduce code and responsibilities for your application and controller life cycles. See <a href=\"https://github.com/basememara/PluggableAppDelegate\" target=\"_blank\" rel=\"noopener\">a sample application</a> using this technique to try it out.</p>\n<p><em><strong>HAPPY CODING!!</strong></em><a href=\"https://medium.com/ios-os-x-development/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\"></a></p>\n"
      },
      {
        "id": 20633,
        "title": "Swifty Localization with Xcode Support",
        "slug": "swifty-localization-xcode-support",
        "type": "post",
        "excerpt": "Localization in Xcode is handled with NSLocalizedString, but it is such a verbose and legacy-like API. There's a Swiftier way that still respects Xcode .xliff exports and comments.",
        "created": "2017-07-11T15:00:59",
        "modified": "2018-04-23T21:16:40",
        "comment_count": 1,
        "link": "http://basememara.com/swifty-localization-xcode-support/",
        "author": 2,
        "featured_media": 20745,
        "categories": [
          2,
          64,
          3,
          4,
          55,
          1,
          7
        ],
        "tags": [
          77,
          50,
          47
        ],
        "content": "<p>Localization can be as much fun as unit testing. And like unit testing, it <em>can</em> be fun if it makes your code more robust and flexible (dependency injection and encapsulation anyone?). For example, once you internationalize your app and start viewing it in right-to-left languages, you&#8217;ll notice areas you&#8217;ve been using auto-layout wrong and start better habits such as using <em>UIStackViews</em> over <em>UILabel</em> text-alignments or tweaking hugging and resistance priorities. There&#8217;s one nagging thing that keeps coming up with localization though&#8230;</p>\n<h2><span>NSLocalizedString</span></h2>\n<p>Our old friend, <code>NSLocalizedString(\"some.dialog.message\", comment: \"My main dialog message for tutorial\")</code>. These localization API&#8217;s can be really bloated and ugly.. it can get out of control. Take this for example:<br />\n[crayon-5bc36d86b77a7574073555/]<br />\nThere&#8217;s so many un-Swifty things about this; there&#8217;s the &#8220;NS-&#8221; prefix, some irrelevant comments in the code, <code>localizedStringWithFormat</code> hasn&#8217;t been split up to function parameters, formatting with locale is some nested call.. I don&#8217;t think it can get any worse.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Napoleon_Meme-500x350.jpg\" alt=\"\" width=\"400\" height=\"280\" class=\"aligncenter wp-image-20648\" /></p>\n<h2>Getting Swifty With It</h2>\n<p>One common technique in making <code>NSLocalizedString</code> more Swifty is wrapping it up in a <code>String</code> extension:<br />\n[crayon-5bc36d86b77ae648425710/]<br />\nLooks good, although it still doesn&#8217;t solve comments from being infused in your code. Furthermore, there&#8217;s one big deal-breaker with this: Xcode will not export the localization to a <em>.xliff</em> file since <em>NSLocalizedString</em> is being used dynamically at runtime here.</p>\n<p>Xcode&#8217;s localization export depends on the hardcoded macro <code>NSLocalizedString</code> to do the search for export, so we still have to use them. Yes, <em>NSLocalizedString</em> is a macro! Hopefully the localization export feature can be rebuilt on top of Xcode 9+&#8217;s refactoring engine 😉</p>\n<h2>Now with Xcode Support™</h2>\n<p>Let&#8217;s take our last attempt further to get the right API while respecting  Xcode support. Using <code>Enums</code> to handle this would be sweet, but you have to use literals so this won&#8217;t compile:<br />\n[crayon-5bc36d86b77b1598502088/]<br />\nThat&#8217;s fine; actually extending a <code>struct</code> would work out better because then I can use extensions to add more localized strings instead of using cases. Let&#8217;s adjust:<br />\n[crayon-5bc36d86b77b4625760146/]<br />\nStill needs a bit more work.</p>\n<p><img src=\"http://basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme-500x418.jpg\" alt=\"\" width=\"400\" height=\"335\" class=\"aligncenter wp-image-20652\" srcset=\"http://basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme-500x418.jpg 500w, http://basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme.jpg 526w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>\n<h2>Localization Micro-Library</h2>\n<p>When refactoring Swift code, one question I ask is how I can leverage inference. I&#8217;d like to end up with something like this:<br />\n[crayon-5bc36d86b77b6499053742/]<br />\nTo achieve this, we&#8217;d have to move all the extensions to <code>String</code>, which would be obnoxious and pollute our <code>String</code> API. Instead, we&#8217;ll have to extend the <code>Localizable</code> struct along with <code>String</code>:<br />\n[crayon-5bc36d86b77b9589924961/]<br />\nNotice how we adjusted the <code>Localizable</code> static properties to return itself for later inference by storing the localized string within its initializer. Now we can do this:<br />\n[crayon-5bc36d86b77bb305024274/]<br />\nIt&#8217;s not as slim as I aimed (which was too terse?), but it&#8217;s reasonable. And still reasonable even though you have to manage the <code>NSLocalizedString</code> list through <code>Localizable</code> static properties, but there&#8217;s no way around that &#8211; at least now they&#8217;re consolidated and reusable from one place, also making comment management easier.</p>\n<h2>Now with Locale Support™</h2>\n<p>For extending <code>.localizedStringWithFormat</code>, there’s still some work to do. Below will give *empty memory values* at runtime, even though it *dangerously compiles*:<br />\n[crayon-5bc36d86b77be544113087/]<br />\nThere are nuances we have to deal with when passing variable arguments to other functions since <code>CVarArg</code> is a bridge to low-level <em>C-language</em> API&#8217;s. We have to facilitate passing the <code>CVarArg</code> arguments to other functions via pointers using Swift&#8217;s <em>&#8220;<a href=\"https://developer.apple.com/documentation/swift/2294740-withvalist\" target=\"_blank\" rel=\"noopener\">withVaList</a>&#8220;</em>:<br />\n[crayon-5bc36d86b77c1300963209/]<br />\nNow it works and we end up with this:<br />\n[crayon-5bc36d86b77c4468416477/]<br />\nAnd Xcode&#8217;s localization export to <em>.xliff</em> works perfectly and with comments since <code>NSLocalizedString</code> is spelled out in the <code>Localizable</code> static extensions <a href=\"https://emojipedia.org/thumbs-up-sign/\" onmousedown=\"return rwt(this,'','','','7','AFQjCNHgpXSOoYKJfqGfOwBIm6b3V91rQQ','','0ahUKEwjAmZ2Dr_zUAhVJfiYKHQdvCykQFgg5MAY','','',event)\">👍</a></p>\n<h2>The Full Example</h2>\n<p>Below is how the result would look like in an app..</p>\n<p><em>Before:</em><br />\n[crayon-5bc36d86b77c7955626486/]<br />\n<em>After:</em><br />\n[crayon-5bc36d86b77ca521792907/]<br />\n<em>Localizable.swift (micro-library):</em><br />\n[crayon-5bc36d86b77cc849834901/]<br />\n<em>AppLocalizable.swift:</em><br />\n[crayon-5bc36d86b77cf108453405/]<br />\nYou can <a href=\"https://github.com/basememara/SwiftyLocalizable\" target=\"_blank\" rel=\"noopener\">download the working sample</a> and give it a try.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n"
      },
      {
        "id": 553,
        "title": "Updating Query String Parameters in Swift",
        "slug": "updating-query-string-parameters-in-swift",
        "type": "post",
        "excerpt": "Adding, updating, and removing query string parameters is a common use case, but very tedious. This Swift function will help make it easy and pleasant leveraging NSURLComponents.",
        "created": "2015-08-05T10:18:55",
        "modified": "2018-03-08T09:54:10",
        "comment_count": 3,
        "link": "http://basememara.com/updating-query-string-parameters-in-swift/",
        "author": 2,
        "featured_media": 554,
        "categories": [
          55
        ],
        "tags": [
          53,
          58
        ],
        "content": "<p>Working with URL&#8217;s is such a frequent task, but very tedious when it comes to parsing and manipulating it. Although there are tons of libraries out there dedicated to alleviating URL string woes, it is rare to find anything good natively built into the language. Objective-C and Swift were slow to the scene, but alas Apple has introduced <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLComponents_class/index.html\" target=\"_blank\" rel=\"noopener\">NSURLComponents</a> starting in iOS7. Just in time for implementing <a href=\"http://blog.hokolinks.com/how-to-implement-apple-universal-links-on-ios-9/\" target=\"_blank\" rel=\"noopener\">Universal Links</a> 😉</p>\n<h2>Query String Parameters</h2>\n<p>Adding, updating, and removing query string parameters is a common use case. It&#8217;s a common piece in my coding arsenal across languages. Now it is time to include one for Swift, here&#8217;s the code:<br />\n[crayon-5bc36d86b7b03226136322/]<br />\nFirst and foremost, I&#8217;m splitting up the URL into pieces using <code>NSURLComponents</code>. This will allow me to work with just the query string parameters leaving everything else intact.</p>\n<p>Next, I&#8217;m looping through the query items of the URL components and finding the key. If found, I am updating the query string parameter, or removing it if the value is <code>nil</code>. The reason why I am checking for <code>nil</code> is so I can reuse the function in the <code>removeQueryString</code> function by simply passing <code>nil</code>.</p>\n<p>Finally, I&#8217;m assigning the mutated query items value back into the components and returning the components as a URL string. If there are no query items, I&#8217;m assigning <code>nil</code> so I don&#8217;t get an empty <code>?</code> appended to the end of the URL.</p>\n<p>Notice if the loop doesn&#8217;t return anything, it means that no query string parameters was found, so I am creating a new query items array and assigning it back. It also gets there if the query items was nil or empty to begin with.</p>\n<p>And as an added bonus, I&#8217;ve included a function to accept a dictionary of query string parameters to do a bulk update in one pass.</p>\n<h2>**UPDATE**</h2>\n<p>Refactored code and will be maintained <a href=\"https://github.com/ZamzamInc/ZamzamKit/blob/master/Sources/Extensions/URL.swift\" target=\"_blank\" rel=\"noopener\">here</a> along with unit tests.<br />\n[crayon-5bc36d86b7b0b891066657/]<br />\n<em>Enjoy!</em></p>\n<p><em><strong>HAPPY CODING!!</strong></em></p>\n"
      }
    ],
    "categories": [
      {
        "id": 55,
        "parent": 0,
        "name": "Swift",
        "slug": "swift",
        "taxonomy": "category",
        "count": 29
      },
      {
        "id": 4,
        "parent": 0,
        "name": "Mobile",
        "slug": "mobile",
        "taxonomy": "category",
        "count": 36
      },
      {
        "id": 64,
        "parent": 0,
        "name": "Featured",
        "slug": "featured",
        "taxonomy": "category",
        "count": 7
      },
      {
        "id": 2,
        "parent": 0,
        "name": ".NET",
        "slug": "net",
        "taxonomy": "category",
        "count": 12
      },
      {
        "id": 3,
        "parent": 0,
        "name": "JavaScript",
        "slug": "javascript",
        "taxonomy": "category",
        "count": 38
      },
      {
        "id": 1,
        "parent": 0,
        "name": "Uncategorized",
        "slug": "uncategorized",
        "taxonomy": "category",
        "count": 2
      },
      {
        "id": 7,
        "parent": 0,
        "name": "Web",
        "slug": "web",
        "taxonomy": "category",
        "count": 18
      }
    ],
    "tags": [
      {
        "id": 62,
        "parent": 0,
        "name": "protocol-oriented-programming",
        "slug": "protocol-oriented-programming",
        "taxonomy": "post_tag",
        "count": 9
      },
      {
        "id": 78,
        "parent": 0,
        "name": "router",
        "slug": "router",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 50,
        "parent": 0,
        "name": "swift",
        "slug": "swift",
        "taxonomy": "post_tag",
        "count": 37
      },
      {
        "id": 74,
        "parent": 0,
        "name": "delegates",
        "slug": "delegates",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 73,
        "parent": 0,
        "name": "threads",
        "slug": "threads",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 68,
        "parent": 0,
        "name": "ai",
        "slug": "ai",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 53,
        "parent": 0,
        "name": "ios",
        "slug": "ios",
        "taxonomy": "post_tag",
        "count": 19
      },
      {
        "id": 67,
        "parent": 0,
        "name": "iot",
        "slug": "iot",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 81,
        "parent": 0,
        "name": "uikit",
        "slug": "uikit",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 66,
        "parent": 0,
        "name": "memory",
        "slug": "memory",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 47,
        "parent": 0,
        "name": "xcode",
        "slug": "xcode",
        "taxonomy": "post_tag",
        "count": 18
      },
      {
        "id": 72,
        "parent": 0,
        "name": "wordpress",
        "slug": "wordpress",
        "taxonomy": "post_tag",
        "count": 2
      },
      {
        "id": 79,
        "parent": 0,
        "name": "clean-architecture",
        "slug": "clean-architecture",
        "taxonomy": "post_tag",
        "count": 2
      },
      {
        "id": 14,
        "parent": 0,
        "name": "mvvm",
        "slug": "mvvm",
        "taxonomy": "post_tag",
        "count": 7
      },
      {
        "id": 61,
        "parent": 0,
        "name": "carthage",
        "slug": "carthage",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 52,
        "parent": 0,
        "name": "cocoapods",
        "slug": "cocoapods",
        "taxonomy": "post_tag",
        "count": 4
      },
      {
        "id": 56,
        "parent": 0,
        "name": "android",
        "slug": "android",
        "taxonomy": "post_tag",
        "count": 5
      },
      {
        "id": 77,
        "parent": 0,
        "name": "localization",
        "slug": "localization",
        "taxonomy": "post_tag",
        "count": 1
      },
      {
        "id": 58,
        "parent": 0,
        "name": "universal-links",
        "slug": "universal-links",
        "taxonomy": "post_tag",
        "count": 1
      }
    ],
    "authors": [
      {
        "id": 2,
        "name": "Basem Emara",
        "link": "https://basememara.com",
        "avatar": "http://2.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=96&d=mm&r=g",
        "description": "Basem is a mobile and software IT professional with over 12 years of experience as an architect, developer, and consultant for dozens of projects that span over various industries for Fortune 500 enterprises, government agencies, and startups. In 2014, Basem brought his vast knowledge and experiences to Swift and helped pioneer the language to build scalable enterprise iOS &amp; watchOS apps, later providing mentorship courses at <a href=\"https://iosmentor.io\">https://iosmentor.io</a>.",
        "created": "2015-02-02T03:39:52",
        "modified": "2018-10-06T14:43:53"
      }
    ],
    "media": [
      {
        "id": 26240,
        "link": "http://basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png",
        "width": 442,
        "height": 564,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png",
        "thumbnail_width": 442,
        "thumbnail_height": 564
      },
      {
        "id": 5576,
        "link": "http://basememara.com/wp-content/uploads/2017/03/delegation1.jpg",
        "width": 573,
        "height": 239,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2017/03/delegation1-500x209.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 209
      },
      {
        "id": 792,
        "link": "http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app.jpg",
        "width": 800,
        "height": 534,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 334
      },
      {
        "id": 41397,
        "link": "http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot.png",
        "width": 2194,
        "height": 1554,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png",
        "thumbnail_width": 500,
        "thumbnail_height": 354
      },
      {
        "id": 777,
        "link": "http://basememara.com/wp-content/uploads/2016/05/CapturFiles_349.png",
        "width": 1428,
        "height": 1060,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2016/05/CapturFiles_349-500x371.png",
        "thumbnail_width": 500,
        "thumbnail_height": 371
      },
      {
        "id": 1739,
        "link": "http://basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
        "width": 391,
        "height": 508,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
        "thumbnail_width": 391,
        "thumbnail_height": 508
      },
      {
        "id": 41346,
        "link": "http://basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2.png",
        "width": 500,
        "height": 518,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2-500x518.png",
        "thumbnail_width": 500,
        "thumbnail_height": 518
      },
      {
        "id": 675,
        "link": "http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330.png",
        "width": 1218,
        "height": 512,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png",
        "thumbnail_width": 500,
        "thumbnail_height": 210
      },
      {
        "id": 41287,
        "link": "http://basememara.com/wp-content/uploads/2018/04/swift-dependency-injection.jpg",
        "width": 3569,
        "height": 2899,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2018/04/swift-dependency-injection-500x406.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 406
      },
      {
        "id": 41258,
        "link": "http://basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
        "width": 414,
        "height": 306,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
        "thumbnail_width": 414,
        "thumbnail_height": 306
      },
      {
        "id": 20745,
        "link": "http://basememara.com/wp-content/uploads/2017/07/localization.jpg",
        "width": 300,
        "height": 284,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2017/07/localization.jpg",
        "thumbnail_width": 300,
        "thumbnail_height": 284
      },
      {
        "id": 554,
        "link": "http://basememara.com/wp-content/uploads/2015/08/Internet1.jpg",
        "width": 1600,
        "height": 1288,
        "thumbnail_link": "http://basememara.com/wp-content/uploads/2015/08/Internet1-500x403.jpg",
        "thumbnail_width": 500,
        "thumbnail_height": 403
      }
    ]
  }